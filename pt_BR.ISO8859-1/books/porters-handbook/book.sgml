<!--
     The FreeBSD Documentation Project

     $FreeBSD: /repoman/r/dcvs/doc/en_US.ISO_8859-1/books/porters-handbook/book.sgml,v 1.148 2001/06/03 21:39:52 dd Exp $
-->

<!DOCTYPE BOOK PUBLIC "-//FreeBSD//DTD DocBook V4.1-Based Extension//EN" [
<!ENTITY % man PUBLIC "-//FreeBSD//ENTITIES DocBook Manual Page Entities//EN">
%man;

<!ENTITY % bookinfo PUBLIC "-//FreeBSD//ENTITIES DocBook BookInfo Entities//EN">
%bookinfo;

<!ENTITY % authors SYSTEM "../handbook/authors.ent"> %authors;
<!ENTITY % mailing-lists SYSTEM "../handbook/mailing-lists.ent">
%mailing-lists;

]>

<book>
  <bookinfo>
    <title>FreeBSD Porter's Handbook</title>

    <authorgroup>
      <corpauthor>The FreeBSD Documentation Project</corpauthor>
    </authorgroup>

    <pubdate>April 2000</pubdate>

    <copyright>
      <year>2000</year>
      <holder role="mailto:doc@FreeBSD.org">The FreeBSD Documentation
	Project</holder>
    </copyright>

    &bookinfo.legalnotice;
  </bookinfo>


    <chapter>
      <title>Making a port yourself</title>

      <para>Assim, agora você está interessado em fazer seu próprio port ou
        melhorando existente? Otimo!</para>

      <para>O que segue são alguns guias para criar um novo port para
        o FreeBSD.  Se você quiser melhorar um port existente, você deve
	ler isto e então ler <xref linkend="port-upgrading">.</para>

      <para>Quando este documento não está suficientemente detalhado, você deve
        consultar o <filename>/usr/ports/Mk/bsd.port.mk</filename>, qual
	todo Makefiles do port inclui.  Mesmo se você não hack Makefiles
	diariamente, ele é bem comentado, e você ainda ganhará muito
	conhecimento dele.  Adicionalmente, você pode enviar perguntas especificas
	para &a.ports;.</para>

      <note>
        <para>Somente uma fração das variáveis
          (<makevar><replaceable>VAR</replaceable></makevar>) que pode ser
          overridden são mencionados neste documento.  A maioria (se não todas)
	  estão documentadas no inicio do <filename>bsd.port.mk</filename>.
	  Este arquivo usa um não-padrão conjunto de tab.
	  <application>Emacs</application> e
	  <application>Vim</application> deve reconhecer the setting on
	  carregando o arquivo.  Ambos <command>vi</command> e
	  <command>ex</command> podem ser definidos para usar o valor correto
	  digitando <command>:set tabstop=4</command> uma vez que os arquivos  tenham sido
	  carregados.</para>
      </note>
    </chapter>

    <chapter id="quick-porting">
      <title>Portando Rápido</title>

      <para>Esta seção lhe diz como fazer um rápido port.  Em muitos casos, isto
        não é suficiente, mas nós veremos.</para>

      <para>Primeiro, obter o tarball original e put it into
        <makevar>DISTDIR</makevar>, qual defaults to
        <filename>/usr/ports/distfiles</filename>.</para>

      <note>
        <para>O seguinte supõe que o software compilado out-of-the-box,
          ex., não havia absolutamente nenhuma mudança necessária para o port funcionar 
          em seu FreeBSD box.  Se você necessitar mudar algo, você terá
          consultar a próxima seção também.</para>
      </note>

      <sect1>
        <title>Escrevendo o <filename>Makefile</filename></title>

        <para>O <filename>Makefile</filename> minimo pareceria algo
          como isto:</para>

        <programlisting># Novas coleções de ports makefile para:   oneko
# Date created:        5 December 1994
# Whom:                asami
#
# &dollar;FreeBSD&dollar;
#

PORTNAME=      oneko
PORTVERSION=   1.1b
CATEGORIES=    games
MASTER_SITES=  ftp://ftp.cs.columbia.edu/archives/X11R5/contrib/

MAINTAINER=    asami@FreeBSD.org

MAN1=          oneko.1
MANCOMPRESSED= yes
USE_IMAKE=     yes

.include &lt;bsd.port.mk&gt;</programlisting>

        <para>Veja se você pode figure it out.  Não se preocupe sobre os índices
          da linha <literal>&dollar;FreeBSD&dollar;</literal> , será
          preenchido automaticamente pelo CVS quando o port está importado ao nossa arvore
          de ports principal.  Você pode encontrar um exemplo mais detalhado na seção<link
            linkend="porting-samplem">Makefile de exemplo</link>.</para>
      </sect1>

      <sect1>
        <title>Escrevendo o arquivos de descrição</title>

        <para>Existem três arquivos de descrição que são necessários para
          qualquer port, se eles realmente package ou não. Eles são
          <filename>pkg-comment</filename>,
          <filename>pkg-descr</filename>, e
          <filename>pkg-plist</filename>, e seus
          prefixo <filename>pkg-</filename> distingue-os de
          outros arquivos.</para>

        <sect2>
          <title><filename>pkg-comment</filename></title>

          <para>Esta é descrição de uma-linha o port.
            <emphasis>Por favor</emphasis> não inclua nome do pacote (ou
            numero da versão do software) no comentário.  O comentário
            deve começar com uma capital, e o final without um periodo.  Aqui
            está um exemplo:</para>

          <programlisting>Um gato perseguindo um rato toda sobre a tela</programlisting>
        </sect2>

        <sect2>
          <title><filename>pkg-descr</filename></title>

          <para>Esta é uma descrição mais longa do port.  Um a alguns
            parágrafos concietizamente explicando o que o port faz é
            suficiente.</para>

          <note>
            <para>Este <emphasis>não</emphasis> é um manual ou uma descrição
              aprofubdada em como usar ou compilar o port! <emphasis>Please
              be careful se você está compiando do
              <filename>README</filename> ou manpage</emphasis>; tão frequentemente
              eles não são uma descrição concise do port ou está em um formato
              awkward (ex., manpages tem espaçamento justificado).  Se o
              software ported tem uma homepage WWW oficial, você deve lista-la
              aqui.  Prefix <emphasis>one</emphasis> do websites com
              <literal>WWW:</literal> assim ferramentas automatizadas
              funcionarão corretamente.</para>
          </note>

          <para>It é recomendado que você assine seu nome no final deste
            arquivo, como em:</para>

          <programlisting>Este é um port do oneko, em qual um gato persegue um pobre rato por toda
a tela.
 :
(etc.)

WWW: http://www.oneko.org/

- Satoshi
asami@cs.berkeley.edu</programlisting>
        </sect2>

        <sect2>
          <title><filename>pkg-plist</filename></title>

          <para>Este arquivo lista todos os arquivos instalados pelo port.  Ele é
            tambem chamado de &ldquo;packing list&rdquo; porque o pacote é
            gerado pelo empacotamento dos arquivos listados aqui.  Os pathnames são
            relativeos ao prefixo de instalação (normalmente
            <filename>/usr/local</filename> ou
            <filename>/usr/X11R6</filename>).  Se você está usando o
            <makevar>MAN<replaceable>n</replaceable></makevar> variáveis (as
            you should be), não liste nenhum manpages aqui.</para>

          <para>Aqui está um pequeno exemplo:</para>

          <programlisting>bin/oneko
lib/X11/app-defaults/Oneko
lib/X11/oneko/cat1.xpm
lib/X11/oneko/cat2.xpm
lib/X11/oneko/mouse.xpm
@dirrm lib/X11/oneko</programlisting>

          <para>Consulte o &man.pkg.create.1; man page para detalhes na
            lista de empacotamento.</para>

          <note>
            <para>Você deve listar todos arquivos, mas não o nomes de diretórios,
              na lista.  Também, se o port cria diretórios para ele mesmo
              durante a instalação, certifique-se de adicionar linhas
               <literal>@dirrm</literal> tão necessária para remove-los quando o port é
              apagado.</para>

            <para>É recomendavél que você mantenha todos nomes de arquivos neste
              arquivo sorted alfabeticamente.  Isto fará a verificação de mudanças
              quando você upgrade o port muito mais fácil.</para>

            <para>Creiando uma lista de empacotamento manualmente pode ser uma tarefa
              muito intediante.  Se o port instala um grande numero de arquivos, <link
                linkend="porting-autoplist">criando lista de empacotamento
                automaticamente</link> pode economizar tempo.</para>
          </note>
        </sect2>
      </sect1>

      <sect1>
        <title>Criando o arquivo de checksum</title>

        <para>So digite <command>make makesum</command>. As regras do make do ports
          gerará automaticamente o arquivo
          <filename>distinfo</filename>.</para>
      </sect1>

      <sect1 id="porting-testing">
        <title>Testando o port</title>

        <para>Você deve certificar-se que a regras do port faz exatamente o que você
          quer que ele faça, incluindo empacotamento do port.  Estes são os
          pontos importantes que você precisa verificar.</para>

        <itemizedlist>
          <listitem>
            <para><filename>pkg-plist</filename> não contém nada instalado pelo
              seu port</para>
          </listitem>

          <listitem>
            <para><filename>pkg-plist</filename> contém tudo o que está
              instalado pelo seu port</para>
          </listitem>

          <listitem>
            <para>Seu port pode ser instalado multiplas vezes usando o
              <maketarget>reinstall</maketarget> target</para>
          </listitem>

          <listitem>
            <para>Seu port <link linkend="porting-cleaning">cleans up</link>
              depois ele mesmo desinstala</para>
          </listitem>
        </itemizedlist>

        <procedure>
          <title>Ordem de teste recomendada</title>

          <step>
            <para><command>make install</command></para>
          </step>

          <step>
            <para><command>make package</command></para>
          </step>

          <step>
            <para><command>make deinstall</command></para>
          </step>

          <step>
            <para><command>pkg_add <replaceable>package-name</replaceable>
              </command></para>
          </step>

          <step>
            <para><command>make deinstall</command></para>
          </step>

          <step>
            <para><command>make reinstall</command></para>
          </step>

          <step>
            <para><command>make package</command></para>
          </step>
        </procedure>

        <para>Certifique-se que não ha quetões avisos em nenhum dos estágios
          <maketarget>pacote</maketarget> e
          <maketarget>deinstall</maketarget> .  Depois do passo 3, verifique para
          ver se  todos os novos diretórios estão corretamente apagados.  Também, tente
          usando o software depois do passo 4, para assegurar que está funciona corretamente
          quando instalado de um pacote.</para>
      </sect1>

      <sect1 id="porting-portlint">
        <title>Verficando seu port com <command>portlint</command></title>

        <para>Por favor use <command>portlint</command> para ver se seu port
          ajusta-se ao nossas orientações.  O programa <command>portlint</command> 
          é parte da coleção do ports.  Em particular, você pode querer
          verificar se o <link linkend="porting-samplem">Makefile</link> está na
          forma certa e o <link
            linkend="porting-pkgname">pacote</link> está nomeado
          apropriadamente.</para>
      </sect1>

      <sect1 id="porting-submitting">
        <title>Submitting the port</title>

        <para>Primeiro, certifique-se de ter lido a seção <link
            linkend="porting-dads">FAZERes e NÃO-FAZERes</link>.</para>

        <para>Agora que você está feliz com seu port, a unica coisa the remaining
          é por-lo na arvore do ports principal do FreeBSD e fazer todos else
          feliz sobre ele também.  Nós não necessitamos seu <filename>work</filename>
          diretório ou o pacote <filename>pkgname.tgz</filename>, assim apague-o
          agora.  Próximo, simplesmente inclua a saida do <command>shar `find
            port_dir`</command> em um bug report e envie-o com o
            &man.send-pr.1; programa (see <ulink url="../handbook/contrib-how.html#CONTRIB-GENERAL">Bug
            Reports and General Commentary</ulink> para mais informações sobre
            &man.send-pr.1;.  Se o port descomprimido é maior que 20KB,
          você deve comprimir ele dentro de um arquivo tar e usar &man.uuencode.1;
          antes de inclui-lo no  bug report (uuencoded tarfiles are
          acceptable even if the bug report is smaller than 20KB but are not
          preferred).  Esteja certo ao classificar o bug report como a categoria
          <literal>ports</literal> e classe
          <literal>change-request</literal>  (Não marque o report
          <literal>confidential</literal>!).
          Também adicione um curta descrição do programa que você ported
          ao campo <quote>Descrição</quote> do PR e
          o arquivo tar shar ou uuencoded ao campo
          <quote>Fix</quote> .  The latter one helps the committers
          a lot, quem usa scripts para o ports-funcionar.</para>

        <para>Uma vez mais, <emphasis>não inclua a fonte original
            distfile, o diretório <filename>work</filename>, ou o pacote
            que você construiu com <command>make package</command></emphasis>.</para>

        <note>
          <para>No passado, nos perguntavamos a você para upload novo port submissions em
            nosso site ftp (<hostid role="fqdn">ftp.FreeBSD.org</hostid>). Este
            não é longer recomendado assim o acesso a leitura é desativado no
            diretório <filename>incoming/</filename> of that site due to the
            large amount of software pirata mostrando la.</para>
        </note>

        <para>Nós veremos nosso port, get back to you se necessário, e ponha-o
          na arvore.  Seu nome também aparecerá na lista de
          &ldquo;Contribuidores adicionais do FreeBSD&rdquo; no Manual do FreeBSD
          e outros arquivos. Não é ótimo?!? <!-- smiley
          -->:-)</para>

        <note>
          <para>Você pode fazer nosso trabalho muito mais fácil, se você usa uma boa
            descrição na sinopse da problema report.
            Nós preferimos algo como
            &ldquo;Novo port: &lt;custa descrição do port&gt;&rdquo; para
            novos ports e
            &ldquo;Autualizado port: &lt;categoria&gt;/&lt;port&gt; &lt;curta descrição
            da atualização&gt;&rdquo; para atualizações de port.
            Se você stick a este esquema, a chance que alguem olhe em
            seu PR cedo é muito maior.</para>
        </note>
      </sect1>
    </chapter>

    <chapter>
      <title>Slow Porting</title>

      <para>Ok, so it was not that simple, e o necessita port algumas
        modificações para funcionar.  Nesta seção, nós explicaremos,
        passo a passo, como modifica-lo para funcionar com os paradigmas
        ports.</para>

      <sect1>
        <title>Como as coisas funcionam</title>

        <para>Primeiro, esta é sequencia de events que ocorrem quando o usuário
          primeiro digita <command>make</command> em seu diretório do port.
          Você pode encontrar that having <filename>bsd.port.mk</filename> em uma outra
          janela enquanto você le isto realmente ajuda compreende-lo.</para>

        <para>Mas não se preocupe se você não entendeu realmente o que
          <filename>bsd.port.mk</filename> está fazendo, muitas pessoas não entendem...
          <!-- smiley --><emphasis>:-&gt;</emphasis></para>

        <procedure>

          <step>
            <para>The <maketarget>fetch</maketarget> target is run.  The
              <maketarget>fetch</maketarget> target é responsavel por certificar-se
              que o tarball existe localmente em
              <makevar>DISTDIR</makevar>. Se  <maketarget>fetch</maketarget>
              não pode encontrar os arquivos necessários em <makevar>DISTDIR</makevar> it
              will look up the URL <makevar>MASTER_SITES</makevar>, qual está
              definido no Makefile, tão bem quanto em nosso site principal de ftp em <ulink
                url="ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/distfiles/">ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/distfiles/</ulink>,
              onde nós colocamos sansionado distfiles como backup.  Ele então
              tentará procurar o arquivo distribuição chamado com
              <makevar>FETCH</makevar>, assumindo que o site pedido tenha
              acesso direto a Internet.  Se sucedido, salvará
              o arquivo em <makevar>DISTDIR</makevar> para uso futuro e
              proseguir.</para>
          </step>

          <step>
            <para>The <maketarget>extract</maketarget> target é executado.  It
              Procurará em seu arquivo de distribuição do port (tipicamente um gzip'd
              tarball) em <makevar>DISTDIR</makevar> e desempacota-lo dentro de um
              especifico subdiretório temporário pelo <makevar>WRKDIR</makevar>
              (defaults to <filename>work</filename>).</para>
          </step>

          <step>
            <para>The <maketarget>patch</maketarget> target é executado.  Primeiro,
              quaisquer patches definidos em <makevar>PATCHFILES</makevar> são
              aplicados.  Segundo, se qualquer arquivos patch chamados
              <filename>patch-<replaceable>*</replaceable></filename> são encontrados em
              <makevar>PATCHDIR</makevar> (defaults ao subdiretório 
              <filename>files</filename>), eles são aplicados neste
              tempo em ordem alfabetica.</para>
          </step>

          <step>
            <para>The <maketarget>configure</maketarget> target é executado.  Isto
              pode fazer qualquer de várias coisas diferentes.</para>

            <orderedlist>
              <listitem>
                <para>Se existe, <filename>scripts/configure</filename> é
                  executado.</para>
              </listitem>

              <listitem>
                <para>Se <makevar>HAS_CONFIGURE</makevar> ou
                  <makevar>GNU_CONFIGURE</makevar> é definido,
                  <filename><makevar>WRKSRC</makevar>/configure</filename> é
                  executado.</para>
              </listitem>

              <listitem>
                <para>Se <makevar>USE_IMAKE</makevar> é definido,
                  <makevar>XMKMF</makevar> (default: <command>xmkmf
                    -a</command>) é executado.</para>
              </listitem>
            </orderedlist>
          </step>

          <step>
            <para>The <maketarget>build</maketarget> target é executado.  Este é
              responsavel por ir descendo dentro do diretório de trabalho privado
              do port (<makevar>WRKSRC</makevar>) e construindo-o.  Se
              <makevar>USE_GMAKE</makevar> é definido, GNU <command>make</command>
              será usado, caso contrário <command>make</command> do sistema
              será usado.</para>
          </step>
        </procedure>

        <para>The above são as ações default.  Adicionalmente, você pode definir
          os alvos
          <maketarget>pre-<replaceable>something</replaceable></maketarget> ou
          <maketarget>post-<replaceable>something</replaceable></maketarget>,
          ou colocar os scripts com aqueles nomes, no subdiretório
          <filename>scripts</filename>, e eles serão executados antes ou depois das
          ações default são feitas.</para>

        <para>Por exemplo, se você tem um alvo <maketarget>post-extract</maketarget>
          definido em seu Makefile, e um arquivo
          <filename>pre-build</filename> no subdiretório <filename>scripts</filename>
          , o alvo <maketarget>post-extract</maketarget> será
          chamado depois das ações de extração regular, e o script
          <filename>pre-build</filename> será executado antes das regras
          de construção default  são feitas.  It is recomendado que você use
          <filename>Makefile</filename> targets se as ações são simples
          bastante, porque será mais fácil para alguem to figure out que tipo
          de ação non-default o port necessita.</para>

        <para>As ações default são feitas pelos
          <filename>bsd.port.mk</filename> targets
          <maketarget>do-<replaceable>something</replaceable></maketarget>.
          Por exemplo, os comandos para extrair um port estão no target
          <maketarget>do-extract</maketarget>.  Se você não está feliz com o
          default target, você pode arruma-lo redefinindo o
          <maketarget>do-<replaceable>something</replaceable></maketarget>
          target em seu <filename>Makefile</filename>.</para>

        <note>
          <para>O &ldquo;main&rdquo; targets (e.g.,
            <maketarget>extract</maketarget>,
            <maketarget>configure</maketarget>, etc.) não faz nada mais que
            certifixcar que todos os estágios up a aquele one estão completos e chama
            os real targets ou scripts, e eles não intended a ser
            mudados.  Se você quer arrumar a extração, arrume
            <maketarget>do-extract</maketarget>, mas nunca jamais toque
            <maketarget>extract</maketarget>!</para>
        </note>

        <para>Agora que você entendeu que está acontecendo quando o usuários digita
          <command>make</command>, deixe-nos ir através dos passos recomendados para
          criar o port perfeito.</para>
      </sect1>

      <sect1>
        <title>Obtendo os fontes originais</title>

        <para>Obter os fontes originais (normalmente) como um tarball comprimido
          (<filename><replaceable>foo</replaceable>.tar.gz</filename> ou
          <filename><replaceable>foo</replaceable>.tar.Z</filename>) e copie
          ele dentro <makevar>DISTDIR</makevar>.  Sempre use
          <emphasis>mainstream</emphasis> fontes quando quando e onde você
          possa.</para>

        <para>Se você não possa encontrar um site ftp/http que está bem-conectado a
          rede, ou pode somente encontrar sites que tenham formatos não-padrão
          irritante, você pode querer colocar uma copia em um confiavel servidor ftp
          ou http que você controla (ex., sua home page).  Certifique-se de definir
          <makevar>MASTER_SITES</makevar> a refletir sua escolha.</para>

        <para>Se você não pode encontrar algo conveniente e confiavel para colocar o
          distfile
          nós podemos &ldquo;house&rdquo; it ourselves
          on <hostid>ftp.FreeBSD.org</hostid>.
          O distfile must be colocado dentro
          <filename>~/public_distfiles/</filename> de someone's
          <hostid>freefall</hostid> account.
          Pergunte as pessoa quem commits seu port para fazer isto.
          Esta pessoa também definirá  <makevar>MASTER_SITES</makevar> para
          <makevar>MASTER_SITE_LOCAL</makevar> e
          <makevar>MASTER_SITE_SUBDIR</makevar> para their
          <hostid>freefall</hostid> username.</para>

        <para>Se seu distfile do port muda todo tempo for no good reason,
          consider putting the distfile em sua home page e listing it as
          the first <makevar>MASTER_SITES</makevar>.  Isto will prevent usuarios
          de obterem erros <errorname>checksum mismatch</errorname>, e
          também reduzir a carga de trabalho dos maintainers de nosso site ftp.  
          Também, se há somente um site master para o port, é recomendado que
          você aloje um backup em seu site e liste-o como segundo
          <makevar>MASTER_SITES</makevar>.</para>

        <para>Se seu port necessita alguns `patches' adicionais que estão
          disponíveis na Internet, fetch them too e coloque-os em
          <makevar>DISTDIR</makevar>.  Não se preocupe se eles virem de um outro
          site de que onde você obteve o tarball do fonte principal, nós temos um
          meio para handle estas situações (veja a descrição do <link
            linkend="porting-patchfiles">PATCHFILES</link> below).</para>
      </sect1>

      <sect1>
        <title>Modificando o port</title>

        <para>Desempacote uma copia do tarball em um diretório privado e faça
          whatever mudaças que são necessárias para obter o port to compilar
          corretamente sob the versão atual do FreeBSD.  Keep <emphasis>careful
            track</emphasis> of tudo que você fez, as você estará automatizando
          o processo shortly.  Tudo, incluindo o exclusão, adição,
          ou modificação dos arquivos deve ser feita usando um automated script
          ou arquivo patch quando seu port é finalizado.</para>

        <para>Se seu port necessita significantes interação/customização do usuário
          para compilar ou instalar, você deve take a look at um dos scripts clássicos
          do Larry Wall<application>Configure</application> scripts e perhaps faz
          algo similar yourself.  The goal dos novos ports collection is
          fazer cada port como &ldquo;plug-and-play&rdquo; as possible for the
          end-user while usando o minimo de espaço de disco.</para>

        <note>
          <para>Ao menos explicitamente stated, arquivos patch, scripts, e outros
            arquivos você criou e contribuiu a coleção de ports do FreeBSD
            estão assumidos a ser cobertos pelas condições padrões do
            BSD copyright.</para>
        </note>
      </sect1>

      <sect1>
        <title>Patching</title>

        <para>Na preparação do port, arquivos que foram adicionados ou
          mudados podem ser picked up com um recursive diff for later feeding to
          patch.  Cada set of patches you deseja aplicar deve ser collected
          into um arquivo chamado
          <filename>patch-<replaceable>*</replaceable></filename> onde
          <replaceable>*</replaceable> denotes a sequencia em qual os
          patches will serão aplicados &mdash; estes são feitos em
          <emphasis>ordem alfabetica</emphasis>, thus <literal>aa</literal>
          primeiro, <literal>ab</literal> segundo e assim por diante.  Se você deseja,
          você pode usar nomes que indicam os pathnames dos arquivoes que
          são patched, como <filename>patch-Imakefile</filename> ou
          <filename>patch-src-config.h</filename>.  Estes arquivos devem
          ser armazenados em <makevar>PATCHDIR</makevar>, from onde eles serão
          automaticamente aplicados.  Todos patches devem ser relativos so
          <makevar>WRKSRC</makevar> (normalmente o diretório que seu tarball do port
          se desempacota dentro, que estando onde a construção é feita).
          Para fazer fixes e upgrades facilmente, você deve avoid having mais de um
          patch fix the same file (e.g., <filename>patch-aa</filename> e
          <filename>patch-ab</filename> ambos mudando
          <filename><makevar>WRKSRC</makevar>/foobar.c</filename>).</para>
      </sect1>

      <sect1>
        <title>Configurando</title>

        <para>Inclui quaisquer comandos adicionais de customizações em seu
          script <filename>configure</filename> e  salva-o no subdiretório
          <filename>scripts</filename>.  Como mencionado acima, você
          pode também fazer isto com <filename>Makefile</filename> targets e/ou
          scripts with the name <filename>pre-configure</filename> or
          <filename>post-configure</filename>.</para>
      </sect1>

      <sect1>
        <title>Manuseando a entrada do usuário</title>

        <para>Se seu port necessita da entrada do usuário para construir, configurar, ou instalar,
          então defina <makevar>IS_INTERACTIVE</makevar> em seu Makefile.  Isto
          permitirá &ldquo;overnight builds&rdquo; para skip seu port se as
          definições do usuário variável <envar>BATCH</envar> em seu ambiente (e
          se o usuário define a variável <envar>INTERACTIVE</envar>, então
          <emphasis>somente</emphasis> aqueles ports necessintando interação são
          construido).</para>

        <para>É também recomendado que se há respostas razoáveis default
          para as perguntas, você deve verificar a variável
          <makevar>PACKAGE_BUILDING</makevar> e desabilitar o
          script interativo quando ele é definido.  Isto permitirá-nos construir os
          pacotes aos CD-ROMs e ftp.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Configurando o Makefile</title>

      <para>Configurando o Makefile é pretty simple, e novamente nós sugerimos
        que você olhe em exemplos existentes antes de iniciar. Também, há um
        <link linkend="porting-samplem">exemplo de Makefile</link> neste
        manual, assim de um olhada e por favor siga as orderns das variáveis
        e seções naquele template para fazer seu port facilmente para outros
        lerem.</para>

      <para>Agora, considerando os seguintes problemas em sequence como você design
        seu novo Makefile:</para>

      <sect1>
        <title>O fonte original</title>

        <para>Faça-o morar em <makevar>DISTDIR</makevar> como em um padrão
	  gzip'd tarball chamado algo como
	  <filename>foozolix-1.2.tar.gz</filename>? If so, você pode ir ao
	  ao próximo passo.  Se não, você deve olhar em overriding qualquer das
	  variáveis <makevar>DISTNAME</makevar>, <makevar>EXTRACT_CMD</makevar>,
	  <makevar>EXTRACT_BEFORE_ARGS</makevar>,
	  <makevar>EXTRACT_AFTER_ARGS</makevar>,
	  <makevar>EXTRACT_SUFX</makevar>, ou <makevar>DISTFILES</makevar>,
	  dependendo em como alien um formato a seu arquivo distribuição
	  é.  (O mais caso comum é
	  <literal>EXTRACT_SUFX=.tar.Z</literal>, quando o tarball está
	  condensado regularmente <command>compress</command>, não
	  <command>gzip</command>.)</para>

        <para>Nos piores casos, você pode simplesmente criar seu próprio
	  <maketarget>do-extract</maketarget> target para override o
	  default, though this deve ser raramente, se  for,
	  necessário.</para>
      </sect1>

      <sect1>
        <title><makevar>PORTNAME</makevar> e <makevar>PORTVERSION</makevar></title>

        <para>Você deve definir <makevar>PORTNAME</makevar> ao
          nome da base de seu port, e <makevar>PORTVERSION</makevar>
          para o numero da versão do port.</para>
      </sect1>

      <sect1>
	<title><makevar>PORTREVISION</makevar> e
	  <makevar>PORTEPOCH</makevar></title>

	<sect2>
	  <title><makevar>PORTREVISION</makevar></title>

	  <para>A variável <makevar>PORTREVISION</makevar> é uma
	    monotonically increasing value which is reset to 0 com
	    every increase of <makevar>PORTVERSION</makevar> (i.e.
	    every time a new official vendor release is made), e
	    appended ao nome do pacote se não-zero.
	    <makevar>PORTREVISION</makevar> é acrescentado cada vez que
	    uma mudança é feita ao port do FreeBSD qual significantemente
	    afeta o content ou estutura dos pacotes 
	    derivados.</para>

	  <para>Exemplos de quando PORTREVISION deve ser bumped:</para>

	  <itemizedlist>
	    <listitem>
	      <para>Adição de patches para corrigir as vulnerabilidades
		de segurança, bugs, ou para adicionar novas funcionalidades ao
		port do FreeBSD.</para>
	    </listitem>

	    <listitem>
	      <para>Mudanças ao makefile do port para abilitar ou disabilitar
		opções no tempo de compilação no pacote.</para>
	    </listitem>

	    <listitem>
	      <para>Mudanças na lista de empacotamento ou no tempo-da-instalação
		behaviour do pacote (ex. mudança ao script
		qual gera initial data para o pacote, como chaves ssh do
		host).</para>
	    </listitem>

	    <listitem>
	      <para>Version bump de umas dependencias da biblioteca
		compartilhada do port (neste caso, alguem tentando instalar o antigo
		pacote depois da instalado uma nova versão da
		dependencia falhará desde que ele procurar o antigo
		libfoo.x ao invés de .(x+1)).</para>
	    </listitem>

	    <listitem>
	      <para>Silent mudanças ao distfile do port qual tem
		significante diferenças funcionais, ex. mudanças ao
		distfile necessita uma correção ao
		<filename>distinfo</filename> com não correspondente mudança ao
		<makevar>PORTVERSION</makevar>, onde um <command>diff
		-ru</command> do antigo e novas versões mostra
		mudanças não-triviais ao código.</para>
	    </listitem>
	  </itemizedlist>

	  <para>Exemplos de mudanças qual não necessitam uma
	    <makevar>PORTREVISION</makevar> bump:</para>

	  <itemizedlist>
	    <listitem>
	      <para>Estilos mudanças ao esqueleto port com mudanças
		não funcionais para que apareçam in the resulting
		package.</para>
	    </listitem>

	    <listitem>
	      <para>Mudanças ao <makevar>MASTER_SITES</makevar> ou
		outras mudanças funcionais ao port qual não
		effect o pacote resulting.</para>
	    </listitem>

	    <listitem>
	      <para>Triviais patches ao distfile como correção
		de typos, qual não são  suficiente importante que usuários
		do pacote devem ir a problemas de
		upgrading.</para>
	    </listitem>

	    <listitem>
	      <para>Build fixes qualcausam uma pacote torna-se
		compilável onde ele foi anteriormente falhando (as long as
		as mudanças não introduziram quaisquer mudanças funcionais em
		quaisquer outras platformas em qual o port feito construido
		anteriormente). Desde <makevar>PORTREVISION</makevar> reflita
		the content do pacote, se nenhum pacote foi
		anteriormente contrutivel então não hé necessidade para increase
		<makevar>PORTREVISION</makevar> para marcar uma
		mudança.</para>
	    </listitem>
	  </itemizedlist>

	  <para>Uma regra do thumb é perguntar a si mesmo whether uma mudança
	    committed a um port é algo qual alguem, algum local,
	    would benefit from having (either because of an
	    enhancement, fix, or by virtue that the new package will
	    actually work for them). If yes, the
	    <makevar>PORTREVISION</makevar> deve ser bumped so that
	    automated tools (e.g.  <command>pkg_version</command>)
	    irá highlight o fata que um novo pacote está
	    disponível.</para>
	</sect2>

	<sect2>
	  <title><makevar>PORTEPOCH</makevar></title>

	  <para>De tempos em tempos um software vendor ou porter do FreeBSD
	    fará algo silly e release uma versão de seus
	    software que está actually numericamente abaixo da
	    versão anterior. Um exemplo dsito é um port qual foi
	    de foo-20000801 para foo-1.0 (o former estará
	    tratado incorretamente como uma versão mais nova desde 20000801 é um
	    valor numericamente superior que 1).</para>

	  <para>Em situações como esta, a versão
	    <makevar>PORTEPOCH</makevar> deve ser increased.
	    Se <makevar>PORTEPOCH</makevar> é não-zero ele é appended
	    ao nome do pacote como descrito na seção 0 acima.
	    <makevar>PORTEPOCH</makevar> nunca é decreased ou reset
	    a zero, porque that would causa comparison a um pacote
	    de um anterior epoch a falhar (ex. o pacote would not
	    ser detectado como fora de data): o novo numero de versão (ex.
	    <literal>1.0,1</literal> no exemplo acima) é ainda
	    numericamente menor que a versão anterior (2000801), mas
	    o sufixo <literal>,1</literal> é tratado especialmente pelo
	    ferramentas automatizadas e encontradas para ser maior que o implied
	    sufixo ",0" no pacote on the eanterior)</para>

	  <para>É esperado que <makevar>PORTEPOCH</makevar> não será
	    usado pela maioria dos ports, e que sensible
	    uso do <makevar>PORTVERSION</makevar> pode often pre-empt
	    it becoming necessário se uma futura future release do software
	    deve mudar a estrutura da versão. However, cuidado é
	    necessário pelo porters do FreeBSD quando um vendor release é feita
	    sem um numero de versão oficial - como um código
	    "snapshot" release.  The temptation é rotular a
	    release com data do liberação, qual irá causar problemas
	    como no exemplo acima quando um nova release "official" é
	    feita.</para>

	  <para>Por exemplo, se um snapshot release é feita na data
	    20000917, e a versão anterior do software foi
	    a versão 1.2, o snapshot release deve ser dada um
	    <makevar>PORTVERSION</makevar> de 1.2.20000917 ou similar,
	    não 20000917, como as que sucedem release, diz 1.3, é
	    ainda um valor numericamente maior.</para>
	</sect2>

	<sect2>
	  <title>Exemplo de uso <makevar>PORTREVISION</makevar> e
	    <makevar>PORTEPOCH</makevar></title>

	  <para>O port gtkmumble, versão 0.10, é ommitted a
	    coleção de ports.</para>

	  <programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.10</programlisting>

	  <para><makevar>PKGNAME</makevar> torna-se
	    <literal>gtkmumble-0.10</literal>.</para>

	  <para>Um buraco de segurança é descoberto qual necessita um patch
	    local do FreeBSD. <makevar>PORTREVISION</makevar> é bumped
	    accordingly.</para>

	  <programlisting>PORTNAME=	gtkmumble
PORTVERSIOn=	0.10
PORTREVISION=	1</programlisting>

	  <para><makevar>PKGNAME</makevar> torna-se
	    <literal>gtkmumble-0.10_1</literal></para>

	  <para>Uma nova versão é released pelo vendor, numbered 0.2
	    (it turns out the author actually intended
	    <literal>0.10</literal> to actually mean
	    <literal>0.1.0</literal>, not <quote>what comes after
	      0.9</quote> - oops, too late now). Since the new minor
	    version <literal>2</literal> is numerically less than the
	    previous version <literal>10</literal> the
	    <makevar>PORTEPOCH</makevar> must be bumped to manually
	    force the new package to be detected as "newer". Desde que ele
	    seja um novo vendor release do código,
	    <makevar>PORTREVISION</makevar> é resetado para 0 (ou removido
	    do makefile).</para>

	  <programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.2
PORTEPOCH=	1</programlisting>

	  <para><makevar>PKGNAME</makevar> torna-se
	    <literal>gtkmumble-0.2,1</literal></para>

	  <para>A próxima release é 0.3. Desde que
	    <makevar>PORTEPOCH</makevar> nunca decreases, a variável versão
	    são agora:</para>
	    
	  <programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.3
PORTEPOCH=	1</programlisting>

	  <para><makevar>PKGNAME</makevar> torna-se
	    <literal>gtkmumble-0.3,1</literal></para>

          <note>
            <para>Se <makevar>PORTEPOCH</makevar> foi resetado
              para <literal>0</literal> com este upgrade, alguem quem
              instalou o pacote gtkmumble-0.10_1 would not detect
              o pacote gtkmumble-0.3 como um mais novo, desde que
              <literal>3</literal> é ainda numericamente memor que
              <literal>10</literal>.</para>
	  </note>
        </sect2>
      </sect1>

      <sect1>
        <title><makevar>PKGNAMEPREFIX</makevar> e <makevar>PKGNAMESUFFIX</makevar></title>

	<para>Two Duas variáveis ocionais, <makevar>PKGNAMEPREFIX</makevar> e
	  <makevar>PKGNAMESUFFIX</makevar>, são combinadas com
	  <makevar>PORTNAME</makevar> e
	  <makevar>PORTVERSION</makevar> para 
          formar <makevar>PKGNAME</makevar> como
          <literal>${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PORTVERSION}</literal>.
          Certifique-se this conforms to our <link
          linkend="porting-pkgname">guidelines for a good package
          name</link>.  In particular, you are not allowed to use a
          hyphen (<literal>-</literal>) in
          <makevar>PORTVERSION</makevar>.  Also, if the package name
          has the <replaceable>language-</replaceable> or the
          <replaceable>compiled.specifics</replaceable> part, use
          <makevar>PKGNAMEPREFIX</makevar> and
          <makevar>PKGNAMESUFFIX</makevar>, respectively.  Do not make
          them part of <makevar>PORTNAME</makevar>.</para>
      </sect1>

      <sect1>
        <title><makevar>DISTNAME</makevar></title>

        <para><makevar>DISTNAME</makevar> is the name of the port as
          called by the authors of the software.
          <makevar>DISTNAME</makevar> defaults to
          <literal>${PORTNAME}-${PORTVERSION}</literal>, so override it if necessary.
          <makevar>DISTNAME</makevar> is only used in two places.
          First, the distribution file list
          (<makevar>DISTFILES</makevar>) defaults to
          <makevar>${DISTNAME}</makevar><makevar>${EXTRACT_SUFX}</makevar>.
          Second, the distribution file is expected to extract into a
          subdirectory named <makevar>WRKSRC</makevar>, which defaults
          to <filename>work/<makevar>${DISTNAME}</makevar></filename>.</para>

	<note>
          <para><makevar>PKGNAMEPREFIX</makevar> and
            <makevar>PKGNAMESUFFIX</makevar> do not affect
            <makevar>DISTNAME</makevar>.  Also note that when
            <makevar>WRKSRC</makevar> is equal to
            <filename>work/<makevar>${PORTNAME}-${PORTVERSION}</makevar></filename>
            while the original source archive is named something other than
            <makevar>${PORTNAME}-${PORTVERSION}${EXTRACT_SUFX}</makevar>,
            you should probably leave <makevar>DISTNAME</makevar>
            alone&mdash; you are better off defining
            <makevar>DISTFILES</makevar> than having to set both
            <makevar>DISTNAME</makevar> and <makevar>WRKSRC</makevar>
            (and possibly <makevar>EXTRACT_SUFX</makevar>).</para>
	</note>
      </sect1>

      <sect1>
        <title><makevar>CATEGORIES</makevar></title>

        <para>When a package is created, it is put under
          <filename>/usr/ports/packages/All</filename> and links are made from
          one or more subdirectories of
          <filename>/usr/ports/packages</filename>.  The names of these
          subdirectories are specified by the variable
          <makevar>CATEGORIES</makevar>.  It is intended to make life easier
          for the user when he is wading through the pile of packages on the
          ftp site or the CD-ROM.  Please take a look at the existing <link
            linkend="porting-categories">categories</link> and pick the ones
          that are suitable for your port.</para>

        <para>This list also determines where in the ports tree the port is
          imported.  If you put more than one category here, it is assumed
          that the port files will be put in the subdirectory with the name in
          the first category.  See the <link
            linkend="porting-categories">categories</link> section for more
          discussion about how to pick the right categories.</para>

        <para>If your port truly belongs to something that is different from
          all the existing ones, you can even create a new category name.  In
          that case, please send mail to the &a.ports; to propose a new
          category.</para>
      </sect1>

      <sect1>
        <title><makevar>MASTER_SITES</makevar></title>

        <para>Record the directory part of the ftp/http-URL pointing at the
          original tarball in <makevar>MASTER_SITES</makevar>.  Do not forget
          the trailing slash (<filename>/</filename>)!</para>

        <para>The <command>make</command> macros will try to use this
          specification for grabbing the distribution file with
          <makevar>FETCH</makevar> if they cannot find it already on the
          system.</para>

        <para>It is recommended that you put multiple sites on this list,
          preferably from different continents.  This will safeguard against
          wide-area network problems, and we are even planning to add support
          for automatically determining the closest master site and fetching
          from there!</para>

        <para>If the original tarball is part of one of the popular
          archives such as X-contrib, GNU, or Perl CPAN, you may be able
          refer to those sites in an easy compact form using
          <makevar>MASTER_SITE_<replaceable>*</replaceable></makevar>
          (e.g., <makevar>MASTER_SITE_XCONTRIB</makevar> and
          <makevar>MASTER_SITE_PERL_GNU</makevar>).  Simply set
          <makevar>MASTER_SITES</makevar> to one of these variables and 
          <makevar>MASTER_SITE_SUBDIR</makevar> to the path within the
          archive.  Here is an example:</para>

        <programlisting>MASTER_SITES=         ${MASTER_SITE_XCONTRIB}
MASTER_SITE_SUBDIR=   applications</programlisting>

        <para>These variables are defined in
          <filename>/usr/ports/Mk/bsd.sites.mk</filename>.  There are
          new archives added all the time, so certifique-se to check the
          latest version of this file before submitting a port.</para>

        <para>The user can also set the <makevar>MASTER_SITE_*</makevar>
          variables in <filename>/etc/make.conf</filename> to override our
          choices, and use their favorite mirrors of these popular archives
          instead.</para>
      </sect1>

      <sect1 id="porting-patchfiles">
        <title><makevar>PATCHFILES</makevar></title>

        <para>If your port requires some additional patches that are available
          by ftp or http, set <makevar>PATCHFILES</makevar> to the names of
          the files and <makevar>PATCH_SITES</makevar> to the URL of the
          directory that contains them (the format is the same as
          <makevar>MASTER_SITES</makevar>).</para>

        <para>If the patch is not relative to the top of the source tree
          (i.e., <makevar>WRKSRC</makevar>) because it contains some extra
          pathnames, set <makevar>PATCH_DIST_STRIP</makevar> accordingly. For
          instance, if all the pathnames in the patch have an extra
          <literal>foozolix-1.0/</literal> in front of the filenames, then set
          <literal>PATCH_DIST_STRIP=-p1</literal>.</para>

        <para>Do not worry if the patches are compressed; they will be
          decompressed automatically if the filenames end with
          <filename>.gz</filename> or <filename>.Z</filename>.</para>

        <para>If the patch is distributed with some other files, such as
          documentation, in a gzip'd tarball, you cannot just use
          <makevar>PATCHFILES</makevar>.  If that is the case, add the name
          and the location of the patch tarball to
          <makevar>DISTFILES</makevar> and <makevar>MASTER_SITES</makevar>.
          Then, use the <makevar>EXTRA_PATCHES</makevar> variable to
          point to those files and <filename>bsd.port.mk</filename>
          will automatically apply them for you.  In particular, do
          <emphasis>not</emphasis> copy patch files into the
          <makevar>PATCHDIR</makevar> directory&mdash;that directory may
          not be writable.</para>

        <note>
          <para>Note that the tarball will have been extracted alongside the
            regular source by then, so there is no need to explicitly extract
            it if it is a regular gzip'd or compress'd tarball. If you do the
            latter, take extra care not to overwrite something that already
            exists in that directory.  Also, do not forget to add a command to
            remove the copied patch in the <maketarget>pre-clean</maketarget>
            target.</para>
        </note>
      </sect1>

      <sect1>
        <title><makevar>MAINTAINER</makevar></title>

        <para>Set your mail-address here.  Please.  <!-- smiley
          --><emphasis>:-)</emphasis></para>

        <para>For a detailed description of the responsibilities of maintainers,
          consulte o <ulink url="../handbook/policies.html#POLICIES-MAINTAINER">MAINTAINER on
            Makefiles</ulink> section.</para>
      </sect1>

      <sect1>
        <title>Dependencies</title>

        <para>Many ports depend on other ports.  There are five variables that
          you can use to ensure that all the required bits will be on the
          user's machine.  There are also some pre-supported dependency
          variables for common cases, plus a few more to control the behaviour
          of dependencies.</para>

        <sect2>
          <title><makevar>LIB_DEPENDS</makevar></title>

          <para>This variable specifies the shared libraries this port depends
            on.  It is a list of
            <replaceable>lib</replaceable>:<replaceable>dir</replaceable><optional><replaceable>:target</replaceable></optional>
            tuples where <replaceable>lib</replaceable> is the name of the
            shared library, <replaceable>dir</replaceable> is the
            directory in which to find it in case it is not available, and
            <replaceable>target</replaceable> is the target to call in that
            directory.  For example, <programlisting> LIB_DEPENDS=
              jpeg.9:${PORTSDIR}/graphics/jpeg:install</programlisting>
            will check for a shared jpeg library with major version 9, and
            descend into the <filename>graphics/jpeg</filename> subdirectory
            of your ports tree to build and install it if it is not found.
            The <replaceable>target</replaceable> part can be omitted if it is
            equal to <makevar>DEPENDS_TARGET</makevar> (which defaults to
            <literal>install</literal>).</para>

          <note>
            <para>The <replaceable>lib</replaceable> part is an argument given
              to <command>ldconfig -r | grep -wF</command>.  There shall be no
              regular expressions in this variable.</para>
          </note>

          <para>The dependency is checked twice, once from within the
            <maketarget>extract</maketarget> target and then from within the
            <maketarget>install</maketarget> target.  Also, the name of the
            dependency is put into the package so that
            <command>pkg_add</command> will automatically install it if it is
            not on the user's system.</para>
        </sect2>

        <sect2>
          <title><makevar>RUN_DEPENDS</makevar></title>

          <para>This variable specifies executables or files this port depends
            on during run-time.  It is a list of
            <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional><replaceable>:target</replaceable></optional>
            tuples where <replaceable>path</replaceable> is the name of the
            executable or file, <replaceable>dir</replaceable> is the
            directory in which to find it in case it is not available, and
            <replaceable>target</replaceable> is the target to call in that
            directory.  If <replaceable>path</replaceable> starts with a slash
            (<literal>/</literal>), it is treated as a file and its existence
            is  tested with <command>test -e</command>; otherwise, it is
            assumed to be an executable, and <command>which -s</command> is
            used to determine if the program exists in the user's search
            path.</para>

          <para>For example,</para>

            <programlisting>RUN_DEPENDS=   ${PREFIX}/etc/innd:${PORTSDIR}/news/inn \
               wish8.0:${PORTSDIR}/x11-toolkits/tk80</programlisting>

          <para>will check if the file or directory
            <filename>/usr/local/etc/innd</filename> exists, and build and
            install it from the <filename>news/inn</filename> subdirectory of
            the ports tree if it is not found.  It will also see if an
            executable called <command>wish8.0</command> is in your search
            path, and descend into the <filename>x11-toolkits/tk80</filename>
            subdirectory of your ports tree to build and install it if it is
            not found.</para>

          <note>
            <para>In this case, <command>innd</command> is actually an
              executable; if an executable is in a place that is not expected
              to be in a normal user's search path, you should use the full
              pathname.</para>
          </note>

          <para>The dependency is checked from within the
            <maketarget>install</maketarget> target.  Also, the name of the
            dependency is put in to the  package so that
            <command>pkg_add</command> will automatically install it if it is
            not on the user's system.  The <replaceable>target</replaceable>
            part can be omitted if it is the same as
            <makevar>DEPENDS_TARGET</makevar>.</para>
        </sect2>

        <sect2>
          <title><makevar>BUILD_DEPENDS</makevar></title>

          <para>This variable specifies executables or files this port
            requires to build.  Like <makevar>RUN_DEPENDS</makevar>, it is a
            list of
            <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional><replaceable>:target</replaceable></optional>
            tuples. For example, <programlisting> BUILD_DEPENDS=
              unzip:${PORTSDIR}/archivers/unzip</programlisting> will check
            for an executable called <command>unzip</command>, and descend
            into the <filename>archivers/unzip</filename> subdirectory of your
            ports tree to build and install it if it is not found.</para>

          <note>
            <para>&ldquo;build&rdquo; here means everything from extraction to
              compilation.  The dependency is checked from within the
              <maketarget>extract</maketarget> target.  The
              <replaceable>target</replaceable> part can be omitted if it is
              the same as <makevar>DEPENDS_TARGET</makevar></para>
          </note>
        </sect2>

        <sect2>
          <title><makevar>FETCH_DEPENDS</makevar></title>

          <para>This variable specifies executables or files this port
            requires to fetch.  Like the previous two, it is a list of
            <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional><replaceable>:target</replaceable></optional>
            tuples.  For example, <programlisting> FETCH_DEPENDS=
              ncftp2:${PORTSDIR}/net/ncftp2</programlisting> will check for an
            executable called <command>ncftp2</command>, and descend into the
            <filename>net/ncftp2</filename> subdirectory of your ports tree to
            build and install it if it is not found.</para>

          <para>The dependency is checked from within the
            <maketarget>fetch</maketarget> target.  The
            <replaceable>target</replaceable> part can be omitted if it is the
            same as <makevar>DEPENDS_TARGET</makevar>.</para>
        </sect2>

        <sect2>
          <title><makevar>DEPENDS</makevar></title>

          <para>If there is a dependency that does not fall into either of the
            above four categories, or your port requires having the source of
            the other port extracted in addition to having it installed,
            then use this variable.  This is a list of
            <replaceable>dir</replaceable><optional><replaceable>:target</replaceable></optional>,
            as there is nothing to check, unlike the previous four.  The
            <replaceable>target</replaceable> part can be omitted if it is the
            same as <makevar>DEPENDS_TARGET</makevar>.</para>
        </sect2>

        <sect2>
          <title>Common dependency variables</title>

          <para>Define <literal>USE_XLIB=yes</literal> if your port requires
            the X Window System to be installed (it is implied by
            <makevar>USE_IMAKE</makevar>).  Define
            <literal>USE_GMAKE=yes</literal> if your port requires GNU
            <command>make</command> instead of BSD <command>make</command>.
            Define <literal>USE_AUTOCONF=yes</literal> if your port requires
            GNU autoconf to be run.  Define <literal>USE_QT=yes</literal> if
            your port uses the latest qt toolkit.  Use
            <literal>USE_PERL5=yes</literal> if your port requires version 5
            of the perl language.  (The last is especially important since
            some versions of FreeBSD have perl5 as part of the base system
            while others do not.)</para>
        </sect2>

        <sect2>
          <title>Notes on dependencies</title>

          <para>As mentioned above, the default target to call when a
            dependency is required is <maketarget>DEPENDS_TARGET</maketarget>.
            It defaults to <literal>install</literal>.  This is a user
            variable; it is never defined in a port's
            <filename>Makefile</filename>.  If your port needs a special way
            to handle a dependency, use the <literal>:target</literal> part of
            the <makevar>*_DEPENDS</makevar> variables instead of redefining
            <makevar>DEPENDS_TARGET</makevar>.</para>

          <para>When you type <command>make clean</command>, its dependencies
            are automatically cleaned too.  If you do not wish this to happen,
            define the variable <makevar>NOCLEANDEPENDS</makevar> in your
            environment.</para>

          <para>To depend on another port unconditionally, use the
            variable <makevar>${NONEXISTENT}</makevar> as the first field 
            of <makevar>BUILD_DEPENDS</makevar> or
            <makevar>RUN_DEPENDS</makevar>.  Use this only when you need to
            the to get to the source of the other port.  You can often save
            compilation time by specifying the target too.  For
            instance

            <programlisting>BUILD_DEPENDS=   ${NONEXISTENT}:${PORTSDIR}/graphics/jpeg:extract</programlisting>

            will always descend to the JPEG port and extract it.</para>

          <para>Do not use <makevar>DEPENDS</makevar> unless there is no other
            way the behaviour you want can be accomplished.  It will cause the
            other port to always be built (and installed, by default), and the
            dependency will go into the packages as well.  If this is really
            what you need, you should probably write it as
            <literal>BUILD_DEPENDS</literal> and
            <literal>RUN_DEPENDS</literal> instead&mdash;at least the
            intention will be clear.</para>
        </sect2>
      </sect1>

     <sect1>
      <title>Optional dependencies</title>
      
      <para>Some large applications can be built in a number of
	configurations, adding functionality if one of a number of
	libraries or applications is available. Since not all users
	want those libraries or applications, the ports system
	provides hooks that the port author can use to decide which
	configuration should be built. Supporting these properly will
	make uses happy, and effectively provide 2 or more ports for the
	price of one.</para>
	
      <para>The easiest of these to use is
	<makevar>WITHOUT_X11</makevar>. If the port can be built both
	with and without X support, then it should normally be built
	with X support. If <makevar>WITHOUT_X11</makevar> is defined,
	then the version that does not have X support should be
	built.</para>
	
      <para>Various parts of GNOME have such knobs, though they are
	slightly more difficult to use. The variables to use in the
	<filename>Makefile</filename> are <makevar>WANT_*</makevar>
	and <makevar>HAVE_*</makevar>. If the application can be
	built both with or without one of the dependencies listed
	below, then the <filename>Makefile</filename> should set
	<makevar>WANT_PKG</makevar>, and should build the version that
	uses <makevar>PKG</makevar> if <makevar>HAVE_PKG</makevar>
	is defined.</para>
	
      <para>The <makevar>WANT_*</makevar> variables currently
	supported this way are <makevar>WANT_GLIB</makevar>,
	<makevar>WANT_GTK</makevar>, <makevar>WANT_ESOUND</makevar>,
	<makevar>WANT_IMLIB</makevar>, and
	<makevar>WANT_GNOME</makevar>.</para>
      </sect1>

      <sect1>
        <title>Building mechanisms</title>

        <para>If your package uses GNU <command>make</command>, set
          <literal>USE_GMAKE=yes</literal>.  If your package uses
          <command>configure</command>, set
          <literal>HAS_CONFIGURE=yes</literal>.  If your package uses GNU
          <command>configure</command>, set
          <literal>GNU_CONFIGURE=yes</literal> (this implies
          <literal>HAS_CONFIGURE</literal>).  If you want to give some extra
          arguments to <command>configure</command> (the default argument list
          <literal>--prefix=&dollar;{PREFIX}</literal> for GNU
          <command>configure</command> and empty for non-GNU
          <command>configure</command>), set those extra arguments in
          <makevar>CONFIGURE_ARGS</makevar>.  If your package uses GNU
          <command>autoconf</command>, set
          <literal>USE_AUTOCONF=yes</literal>.  This implies
          <makevar>GNU_CONFIGURE</makevar>, and will cause
          <command>autoconf</command> to be run before
          <command>configure</command>.</para>

        <para>If your package is an X application that creates
          <filename>Makefile</filename>s from <filename>Imakefile</filename>s
          using <command>imake</command>, then set
          <literal>USE_IMAKE=yes</literal>.  This will cause the configure
          stage to automatically do an <command>xmkmf -a</command>.  If the
          <option>-a</option> flag is a problem for your port, set
          <literal>XMKMF=xmkmf</literal>. If the port uses
          <command>imake</command> but does not understand the
          <maketarget>install.man</maketarget> target,
          <literal>NO_INSTALL_MANPAGES=yes</literal> should be set. In
          addition, the author of the original port should be shot. <!--
          smiley --><emphasis>:-&gt;</emphasis></para>

        <para>If your port's source <filename>Makefile</filename> has
          something else than <maketarget>all</maketarget> as the main build
          target, set <makevar>ALL_TARGET</makevar> accordingly.  Same goes
          for <maketarget>install</maketarget> and
          <makevar>INSTALL_TARGET</makevar>.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Special considerations</title>

      <para>There are some more things you have to take into account when you
        create a port.  This section explains the most common of those.</para>

      <sect1 id="porting-shlibs">
        <title>Shared Libraries</title>

        <para>If your port installs one or more shared libraries, define a
          <makevar>INSTALLS_SHLIB</makevar> make variable, which will instruct
          a <filename>bsd.port.mk</filename> to run
          <literal>&dollar;{LDCONFIG} -m</literal> on the directory where the
          new library is installed (usually
          <filename><makevar>PREFIX</makevar>/lib</filename>) during
          <maketarget>post-install</maketarget> target to register it into the
          shared library cache.  This variable, when defined, will also
          facilitate addition of an appropriate
          <literal>@exec /sbin/ldconfig -m</literal> and
          <literal>@unexec /sbin/ldconfig -R</literal> pair into your
          <filename>pkg-plist</filename> file, so that a user who installed
          the package can start using the shared library immediately and
          deinstallation will not cause the system to still believe the
          library is there.</para>

        <para>If you need, you can override default location where the new
          library is installed by defining <makevar>LDCONFIG_DIRS</makevar>
          make variable, which should contain a list of directories into which
          shared libraries are to be installed.  For example if your port
          installs shared libraries into
          <filename><makevar>PREFIX</makevar>/lib/foo</filename> and
          <filename><makevar>PREFIX</makevar>/lib/bar</filename> directories
          you could use the following in your
          <filename>Makefile</filename>:</para>

        <programlisting>INSTALLS_SHLIB= yes
LDCONFIG_DIRS=  %%PREFIX%%/lib/foo %%PREFIX%%/lib/bar</programlisting>

        <para>Note that content of <makevar>LDCONFIG_DIRS</makevar> is passed
          through &man.sed.1; just like the rest of <filename>pkg-plist</filename>,
          so <makevar>PLIST_SUB</makevar> substitutions also apply here.  It is
          recommended that you use <literal>%%PREFIX%%</literal> for
          <makevar>PREFIX</makevar>, <literal>%%LOCALBASE%%</literal> for
          <makevar>LOCALBASE</makevar> and <literal>%%X11BASE%%</literal> for
          <makevar>X11BASE</makevar>.</para>
      </sect1>
    </chapter>

<!--

    <chapter>
      <title>ELF support</title>

      <para>Since FreeBSD changed to an ELF binary format shortly after
        3.0-RELEASE, we need to convert many ports that build shared
        libraries to support ELF.  Complicating this task is that a 3.0
        system can run as both ELF and a.out, and we wish to unofficially
        support the 2.2 branch as long as possible.  Below are the guidelines on
        how to convert a.out only ports to support both a.out and ELF
        compilation.</para>

      <para>Some part of this list is only applicable during the conversion,
        but will be left here for a while for reference in case you have come
        across some old port you wish to upgrade.</para>

      <sect1>
        <title>Moving a.out libraries out of the way</title>

        <para>Any a.out libraries should be moved out of
          <filename>/usr/local/lib</filename> and similar to an
          <filename>aout</filename> subdirectory.  (If you do not move them out
          of the way, ELF ports will happily overwrite a.out libraries.) The
          <maketarget>move-aout-libs</maketarget> target in the 3.0-CURRENT
          <filename>src/Makefile</filename> (called from
          <maketarget>aout-to-elf</maketarget>) will do this for you.  It will
          only move a.out libs so it is safe to call it on a system with both
          ELF and a.out libs in the standard directories.</para>
      </sect1>

      <sect1>
        <title>Format</title>

        <para>The ports tree will build packages in the format the machine is
          in.  This means a.out for 2.2 and a.out or ELF for 3.0 depending on
          what <command>`objformat`</command> returns.  Also, once users move
          a.out libraries to a subdirectory, building a.out libraries will be
          unsupported.  (I.e., it may still work if you know what you are
          doing, but you are on your own.)</para>

        <note>
          <para>If a port only works for a.out, set
            <makevar>BROKEN_ELF</makevar> to a string describing the reason
            why.  Such ports will be skipped during a build on an ELF
            system.</para>
        </note>
      </sect1>

      <sect1>
        <title><makevar>PORTOBJFORMAT</makevar></title>

        <para><filename>bsd.port.mk</filename> will set
          <makevar>PORTOBJFORMAT</makevar> to <literal>aout</literal> or
          <literal>elf</literal> and export it in the environments
          <envar>CONFIGURE_ENV</envar>, <envar>SCRIPTS_ENV</envar> and
          <envar>MAKE_ENV</envar>.  (It's always going to be
          <literal>aout</literal> in 2.2-STABLE).  It is also passed to
          <maketarget>PLIST_SUB</maketarget> as
          <literal>PORTOBJFORMAT=${PORTOBJFORMAT}</literal>.  (See comment on
          <literal>ldconfig</literal> lines below.)</para>

        <para>The variable is set using this line in
          <filename>bsd.port.mk</filename>:</para>

        <programlisting>PORTOBJFORMAT!= test -x /usr/bin/objformat && /usr/bin/objformat || echo aout</programlisting>

        <para>Ports' make processes should use this variable to decide what to
          do.  However, if the port's <filename>configure</filename> script
          already automatically detects an ELF system, it is not necessary to
          refer to <makevar>PORTOBJFORMAT</makevar>.</para>
      </sect1>

      <sect1>
        <title>Building shared libraries</title>

        <para>The following are differences in handling shared libraries for
          a.out and ELF.</para>

        <itemizedlist>
          <listitem>
            <para>Shared library versions</para>

            <para>An ELF shared library should be called
              <filename>libfoo.so.<replaceable>M</replaceable></filename>
              where <replaceable>M</replaceable> is the single version number,
              and an a.out library should be called
              <filename>libfoo.so.<replaceable>M</replaceable>.<replaceable>N</replaceable></filename>
              where <replaceable>M</replaceable> is the major version and
              <replaceable>N</replaceable> is the the minor version number.
              Do not mix those; <emphasis>never</emphasis> install an ELF
              shared library called
              <filename>libfoo.so.<replaceable>N</replaceable>.<replaceable>M</replaceable></filename>
              or an a.out shared library (or symlink) called
              <filename>libfoo.so.<replaceable>N</replaceable></filename>.</para>
          </listitem>

          <listitem>
            <para>Linker command lines</para>

            <para>Assuming <command>cc -shared</command> is used rather than
              <command>ld</command> directly, the only difference is that you
              need to add
              <option>-Wl,-<replaceable>soname,libfoo.so.M</replaceable></option
>
              on the command line for ELF.</para>
            </listitem>
        </itemizedlist>

        <para>You need to install a symlink from
          <filename>libfoo.so</filename> to
          <filename>libfoo.so.<replaceable>N</replaceable></filename> to make
          ELF linkers happy.  Since it should be listed in
          <filename>pkg-plist</filename> too, and it won't hurt in the a.out case
          (some ports even require the link for dynamic loading), you should
          just make this link regardless of the setting of
          <makevar>PORTOBJFORMAT</makevar>.</para>
      </sect1>

      <sect1>
        <title><makevar>LIB_DEPENDS</makevar></title>

        <para>All port Makefiles are edited to remove minor numbers from
          <makevar>LIB_DEPENDS</makevar>, and also to have the regexp support
          removed.  (E.g., <literal>foo\\.1\\.\\(33|40\\)</literal> becomes
          <literal>foo.2</literal>.)  They will be matched using <command>grep
            -wF</command>.</para>
      </sect1>

      <sect1>
        <title><filename>pkg-plist</filename></title>

        <para><filename>pkg-plist</filename> should contain the short (ELF) shlib
          names if the a.out minor number is zero, and the long (a.out) names
          otherwise.  <filename>bsd.port.mk</filename> will automatically add
          <literal>.0</literal> to the end of short shlib lines if
          <makevar>PORTOBJFORMAT</makevar> equals <literal>aout</literal>, and
          will delete the minor number from long shlib names if
          <makevar>PORTOBJFORMAT</makevar> equals
          <literal>elf</literal>.</para>

        <para>In cases where you really need to install shlibs with two
          versions on an ELF system or those with one version on an a.out
          system (for instance, ports that install compatibility libraries for
          other operating systems), define the variable
          <makevar>NO_FILTER_SHLIBS</makevar>.  This will turn off the editing
          of <filename>pkg-plist</filename> mentioned in the previous
          paragraph.</para>
      </sect1>

      <sect1>
        <title><literal>ldconfig</literal></title>

        <para>The <literal>ldconfig</literal> line in Makefiles should
          read:</para>

        <programlisting>${SETENV} OBJFORMAT=${PORTOBJFORMAT} ${LDCONFIG} -m ....</programlisting>

        <para>In <filename>pkg-plist</filename> it should read;</para>

        <programlisting>@exec /usr/bin/env OBJFORMAT=%%PORTOBJFORMAT%% /sbin/ldconfig -m ...
@unexec /usr/bin/env OBJFORMAT=%%PORTOBJFORMAT%% /sbin/ldconfig -R</programlisting>

        <para>This is to ensure that the correct <command>ldconfig</command>
          will be called depending on the format of the package, not the
          default format of the system.</para>
      </sect1>
    </chapter>

-->

    <chapter id="porting-masterdir">
      <title><makevar>MASTERDIR</makevar></title>

      <para>If your port needs to build slightly different versions of
        packages by having a variable (for instance, resolution, or paper
        size) take different values, create one subdirectory per package to
        make it easier for users to see what to do, but try to share as many
        files as possible between ports.  Typically you only need a very short
        <filename>Makefile</filename> in all but one of the directories if you
        use variables cleverly.  In the sole <filename>Makefiles</filename>,
        you can use <makevar>MASTERDIR</makevar> to specify the directory
        where the rest of the files are.  Also, use a variable as part of
        <link linkend="porting-pkgname"><makevar>PKGNAMESUFFIX</makevar></link> so
        the packages will have different names.</para>

      <para>This will be best demonstrated by an example.  This is part of
        <filename>japanese/xdvi300/Makefile</filename>;</para>

      <programlisting>PORTNAME=       xdvi
PORTVERSION=    17
PKGNAMEPREFIX=  ja-
PKGNAMESUFFIX=  ${RESOLUTION}
 :
# default
RESOLUTION?=   300
.if ${RESOLUTION} != 118 && ${RESOLUTION} != 240 && \
       ${RESOLUTION} != 300 && ${RESOLUTION} != 400
       @${ECHO} "Error: invalid value for RESOLUTION: \"${RESOLUTION}\""
       @${ECHO} "Possible values are: 118, 240, 300 (default) and 400."
       @${FALSE}
.endif</programlisting>

      <para><filename>japanese/xdvi300</filename> also has all the regular
        patches, package files, etc.  If you type <command>make</command>
        there, it will take the default value for the resolution (300) and
        build the port normally.</para>

      <para>As for other resolutions, this is the <emphasis>entire</emphasis>
        <filename>xdvi118/Makefile</filename>:</para>

      <programlisting>RESOLUTION=     118
MASTERDIR=      ${.CURDIR}/../xdvi300

.include ${MASTERDIR}/Makefile</programlisting>

      <para>(<filename>xdvi240/Makefile</filename> and
        <filename>xdvi400/Makefile</filename> are similar).  The
        <makevar>MASTERDIR</makevar> definition tells
        <filename>bsd.port.mk</filename> that the regular set of
        subdirectories like <makevar>FILESDIR</makevar> and
        <makevar>SCRIPTDIR</makevar> are to be found under
        <filename>xdvi300</filename>.  The <literal>RESOLUTION=118</literal>
        line will override the <literal>RESOLUTION=300</literal> line in
        <filename>xdvi300/Makefile</filename> and the port will be built with
        resolution set to 118.</para>
    </chapter>

    <chapter>
      <title>Shared library versions</title>

      <para>Please read our <ulink url="../handbook/policies-shlib.html">policy on
        shared library versioning</ulink> to understand what to do with
        shared library versions in general.  Do not blindly assume software
        authors know what they are doing; many of them do not.  It is very
        important that these details are carefully considered, as we have
        quite a unique situation where we are trying to have dozens of
        potentially incompatible software pairs co-exist. Careless port
        imports have caused great trouble regarding shared libraries in the
        past (ever wondered why the port <filename>jpeg-6b</filename> has a
        shared library version of 9?). If in doubt, send a message to the
        &a.ports;.  Most of the time, your job ends by determining the right
        shared library version and making appropriate patches to implement
        it.</para>

<!--
      <para>However, if there is a port which is a different version of the
        same software already in the tree, the situation is much more complex.
        In short, the FreeBSD implementation does not allow the user to
        specify to the linker which version of shared library to link against
        (the linker will always pick the highest numbered version).  This
        means, if there is a <filename>libfoo.so.3.2</filename> and
        <filename>libfoo.so.4.0</filename> in the system, there is no way to
        tell the linker to link a particular application to
        <filename>libfoo.so.3.2</filename>.  It is essentially completely
        overshadowed in terms of compilation-time linkage.  In this case, the
        only solution  is to rename the <emphasis>base</emphasis> part of the
        shared library.  For instance, change
        <filename>libfoo.so.4.0</filename> to
        <filename>libfoo4.so.1.0</filename> so both version 3.2 and 4.0 can be
        linked from other ports.</para>
-->
    </chapter>

    <chapter id="porting-manpages">
      <title>Manpages</title>

      <para>The <makevar>MAN[1-9LN]</makevar> variables will automatically add
        any manpages to <filename>pkg-plist</filename> (this means you must
        <emphasis>not</emphasis> list manpages in the
        <filename>pkg-plist</filename>&mdash;see <link
          linkend="porting-plist">generating PLIST</link> for more).  It also
        makes the install stage automatically compress or uncompress manpages
        depending on the setting of <makevar>NOMANCOMPRESS</makevar> in
        <filename>/etc/make.conf</filename>.</para>

      <para>If your port tries to install multiple names for manpages using
        symlinks or hardlinks, you must use the <makevar>MLINKS</makevar>
        variable to identify these.  The link installed by your port will
        be destroyed and recreated by <filename>bsd.port.mk</filename>
        to certifique-se it points to the correct file.  Any manpages
        listed in MLINKS must not be listed in the
        <filename>pkg-plist</filename>.</para>

      <para>To specify whether the manpages are compressed upon installation,
        use the <makevar>MANCOMPRESSED</makevar> variable. This variable can
        take three values, <literal>yes</literal>, <literal>no</literal> and
        <literal>maybe</literal>. <literal>yes</literal> means manpages are
        already installed compressed, <literal>no</literal> means they are
        not, and <literal>maybe</literal> means the software already respects
        the value of <makevar>NOMANCOMPRESS</makevar> so
        <filename>bsd.port.mk</filename> does not have to do anything
        special.</para>

      <para><makevar>MANCOMPRESSED</makevar> is automatically set to
        <literal>yes</literal> if <makevar>USE_IMAKE</makevar> is set and
        <makevar>NO_INSTALL_MANPAGES</makevar> is not set, and to
        <literal>no</literal> otherwise.  You do not have to explicitly define
        it unless the default is not suitable for your port.</para>

      <para>If your port anchors its man tree somewhere other than
        <makevar>PREFIX</makevar>, you can use the
        <makevar>MANPREFIX</makevar> to set it.  Also, if only manpages in
        certain sections go in a non-standard place, such as some Perl modules
        ports, you can set individual man paths using
        <makevar>MAN<replaceable>sect</replaceable>PREFIX</makevar> (where
        <replaceable>sect</replaceable> is one of <literal>1-9</literal>,
        <literal>L</literal> or <literal>N</literal>).</para>

      <para>If your manpages go to language-specific subdirectories, set the
        name of the languages to <makevar>MANLANG</makevar>.  The value of
        this variable defaults to <literal>""</literal> (i.e., English
        only).</para>

      <para>Here is an example that puts it all together.</para>

      <programlisting>MAN1=          foo.1
MAN3=          bar.3
MAN4=          baz.4
MLINKS=        foo.1 alt-name.8
MANLANG=       "" ja
MAN3PREFIX=    ${PREFIX}/share/foobar
MANCOMPRESSED= yes</programlisting>

      <para>This states that six files are installed by this port;</para>

          <programlisting>${PREFIX}/man/man1/foo.1.gz
${PREFIX}/man/ja/man1/foo.1.gz
${PREFIX}/share/foobar/man/man3/bar.3.gz
${PREFIX}/share/foobar/man/ja/man3/bar.3.gz
${PREFIX}/man/man4/baz.4.gz
${PREFIX}/man/ja/man4/baz.4.gz</programlisting>

      <para>Additionally <filename>${PREFIX}/man/man8/alt-name.8.gz</filename>
        may or may not be installed by your port.  Regardless, a
        symlink will be made to join the foo(1) manpage and
        alt-name(8) manpage.</para>

    </chapter>

    <chapter id="porting-motif">
      <title>Ports that require Motif</title>

      <para>There are many programs that require a Motif library (available
        from several commercial vendors, while there is a free clone reported
        to be able to run many applications in
        <filename>x11-toolkits/lesstif</filename>) to compile.  Since it is a
        popular toolkit and their licenses usually permit redistribution of
        statically linked binaries, we have made special provisions for
        handling ports that require Motif in a way that we can easily compile
        binaries linked either dynamically (for people who are compiling from
        the port) or statically (for people who distribute packages).</para>

      <sect1>
        <title><makevar>REQUIRES_MOTIF</makevar></title>

        <para>If your port requires Motif, define this variable in the
          Makefile.  This will prevent people who do not own a copy of Motif
          from even attempting to build it.</para>
      </sect1>

      <sect1>
        <title><makevar>MOTIFLIB</makevar></title>

        <para>This variable will be set by <filename>bsd.port.mk</filename> to
          be the appropriate reference to the Motif library.  Please patch the
          source to use this wherever the Motif library is referenced in the
          <filename>Makefile</filename> or
          <filename>Imakefile</filename>.</para>

        <para>There are two common cases:</para>

        <itemizedlist>
          <listitem>
            <para>If the port refers to the Motif library as
              <literal>-lXm</literal> in its <filename>Makefile</filename> or
              <filename>Imakefile</filename>, simply substitute
              <literal>&dollar;{MOTIFLIB}</literal> for it.</para>
          </listitem>

          <listitem>
            <para>If the port uses <literal>XmClientLibs</literal> in its
              <filename>Imakefile</filename>, change it to
              <literal>&dollar;{MOTIFLIB} &dollar;{XTOOLLIB}
                &dollar;{XLIB}</literal>.</para>
          </listitem>

        </itemizedlist>

        <para>Note that <makevar>MOTIFLIB</makevar> (usually) expands to
          <literal>-L/usr/X11R6/lib -lXm</literal> or
          <literal>/usr/X11R6/lib/libXm.a</literal>, so there is no need to
          add <literal>-L</literal> or <literal>-l</literal> in front.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>X11 fonts</title>

      <para>If your port installs fonts for the X Window system, put them in
        <filename><makevar>X11BASE</makevar>/lib/X11/fonts/local</filename>.
        This directory is new to XFree86 release 3.3.3.  If it does not exist,
        please create it, and print out a message urging the user to update
        their XFree86 to 3.3.3 or newer, or at least add this directory to the
        font path in <filename>/etc/XF86Config</filename>.</para>
    </chapter>

    <chapter id="porting-info">
      <title>Info files</title>

      <para>The new version of texinfo (included in 2.2.2-RELEASE and onwards)
        contains a utility called <command>install-info</command> to add and
        delete entries to the <filename>dir</filename> file.  If your port
        installs any info documents, please follow these instructions so your
        port/package will correctly update the user's
        <filename><makevar>PREFIX</makevar>/info/dir</filename> file.  (Sorry
        for the length of this section, but is it imperative to weave all the
        info files together.  If done correctly, it will produce a
        <emphasis>beautiful</emphasis> listing, so please bear with me!</para>

      <para>First, this is what you (as a porter) need to know</para>

      <screen>&prompt.user; <userinput>install-info --help</userinput>
install-info [OPTION]... [INFO-FILE [DIR-FILE]]
  Install INFO-FILE in the Info directory file DIR-FILE.

Options:
--delete          Delete existing entries in INFO-FILE;
                    don't insert any new entries.
 :
--entry=TEXT      Insert TEXT as an Info directory entry.
 :
--section=SEC     Put this file's entries in section SEC of the directory. :</screen>

      <note>
        <para>This program will not actually <emphasis>install</emphasis> info
          files; it merely inserts or deletes entries in the
          <filename>dir</filename> file.</para>
      </note>

      <para>Here's a seven-step procedure to convert ports to use
        <command>install-info</command>.
        <filename>editors/emacs</filename> will be used as an
        example.</para>

      <procedure>
        <step>
          <para>Look at the texinfo sources and make a patch to insert
            <literal>@dircategory</literal> and <literal>@direntry</literal>
            statements to files that do not have them.  This is part of my
            patch:</para>

          <programlisting>--- ./man/vip.texi.org  Fri Jun 16 15:31:11 1995
+++ ./man/vip.texi      Tue May 20 01:28:33 1997
@@ -2,6 +2,10 @@

 @setfilename ../info/vip
 @settitle VIP
+@dircategory The Emacs editor and associated tools
+@direntry
+* VIP: (vip).          A VI-emulation for Emacs.
+@end direntry

 @iftex
 @finalout
 :</programlisting>

          <para>The format should be self-explanatory.  Many authors leave a
            <filename>dir</filename> file in the source tree that contains all
            the entries you need, so look around before you try to write your
            own.  Also, certifique-se you look into related ports and make the
            section names and entry indentations consistent (we recommend that
            all entry text start at the 4th tab stop).</para>

          <note>
            <para>Note that you can put only one info entry per file because
              of a bug in <command>install-info --delete</command> that
              deletes only the first entry if you specify multiple entries in
              the <email>@direntry</email> section.</para>
          </note>

          <para>You can give the <literal>dir</literal> entries to
            <command>install-info</command> as arguments
            (<option>--section</option> and <option>--entry</option>) instead
            of patching the texinfo sources.  This probably is not a good
            idea for ports because you need to duplicate the same information
            in <emphasis>three</emphasis> places
            (<filename>Makefile</filename> and
            <literal>@exec</literal>/<literal>@unexec</literal> of
            <filename>pkg-plist</filename>; see below).  However, if you have
            Japanese (or other multibyte encoding) info files, you will have
            to use the extra arguments to <command>install-info</command>
            because <command>makeinfo</command> cannot handle those texinfo
            sources.  (See <filename>Makefile</filename> and
            <filename>pkg-plist</filename> of <filename>japanese/skk</filename>
            for examples on how to do this).</para>
        </step>

        <step>
          <para>Go back to the port directory and do a <command>make clean;
              make</command> and verify that the info files are regenerated
            from the texinfo sources. Since the texinfo sources are newer than
            the info files, they should be rebuilt when you type
            <command>make</command>; but many <filename>Makefile</filename>s
            do not include correct dependencies for info files.  In
            <command>emacs</command>' case, it was necessary to patch the main
            <filename>Makefile.in</filename> so it would descend into the
            <filename>man</filename> subdirectory to rebuild the info
            pages.</para>

          <programlisting>--- ./Makefile.in.org   Mon Aug 19 21:12:19 1996
+++ ./Makefile.in       Tue Apr 15 00:15:28 1997
@@ -184,7 +184,7 @@
 # Subdirectories to make recursively.  `lisp' is not included
 # because the compiled lisp files are part of the distribution
 # and you cannot remake them without installing Emacs first.
-SUBDIR = lib-src src
+SUBDIR = lib-src src man

 # The makefiles of the directories in $SUBDIR.
 SUBDIR_MAKEFILES = lib-src/Makefile man/Makefile src/Makefile oldXMenu/Makefile
 lwlib/Makefile
--- ./man/Makefile.in.org       Thu Jun 27 15:27:19 1996
+++ ./man/Makefile.in   Tue Apr 15 00:29:52 1997
@@ -66,6 +66,7 @@
 ${srcdir}/gnu1.texi \
 ${srcdir}/glossary.texi

+all: info
 info: $(INFO_TARGETS)

 dvi: $(DVI_TARGETS)</programlisting>

          <para>The second hunk was necessary because the default target in
            the <filename>man</filename> subdir is called
            <maketarget>info</maketarget>, while the main
            <filename>Makefile</filename> wants to call
            <maketarget>all</maketarget>.  The installation of the
            <filename>info</filename> info file was also removed because we
            already have one with the same name in
            <filename>/usr/share/info</filename> (that patch is not shown
            here).</para>
        </step>

        <step>
          <para>If there is a place in the <filename>Makefile</filename> that
            is installing the <filename>dir</filename> file, delete it.  Seu port may not be doing it.  Also, remove any commands that are
            otherwise mucking around with the <filename>dir</filename>
            file.</para>

          <programlisting>--- ./Makefile.in.org   Mon Aug 19 21:12:19 1996
+++ ./Makefile.in       Mon Apr 14 23:38:07 1997
@@ -368,14 +368,8 @@
        if [ `(cd ${srcdir}/info && /bin/pwd)` != `(cd ${infodir} && /bin/pwd)` ]; \
        then \
          (cd ${infodir};  \
-          if [ -f dir ]; then \
-            if [ ! -f dir.old ]; then mv -f dir dir.old; \
-            else mv -f dir dir.bak; fi; \
-          fi; \
           cd ${srcdir}/info ; \
-          (cd $${thisdir}; ${INSTALL_DATA} ${srcdir}/info/dir ${infodir}/dir);
\
-          (cd $${thisdir}; chmod a+r ${infodir}/dir); \
           for f in ccmode* cl* dired-x* ediff* emacs* forms* gnus* info* message* mh-e* sc* vip*; do \
             (cd $${thisdir}; \
              ${INSTALL_DATA} ${srcdir}/info/$$f ${infodir}/$$f; \
              chmod a+r ${infodir}/$$f); \</programlisting>
        </step>

        <step>
          <para>(This step is only necessary if you are modifying an existing
            port.) Take a look at <filename>pkg-plist</filename> and delete
            anything that is trying to patch up <filename>info/dir</filename>.
            They may be in <filename>pkg-install</filename> or some other
            file, so search extensively.</para>

          <programlisting>Index: pkg-plist
===================================================================
RCS file: /usr/cvs/ports/editors/emacs/pkg-plist,v
retrieving revision 1.15
diff -u -r1.15 pkg-plist
--- pkg-plist       1997/03/04 08:04:00     1.15
+++ pkg-plist       1997/04/15 06:32:12
@@ -15,9 +15,6 @@
 man/man1/emacs.1.gz
 man/man1/etags.1.gz
 man/man1/ctags.1.gz
-@unexec cp %D/info/dir %D/info/dir.bak
-info/dir
-@unexec cp %D/info/dir.bak %D/info/dir
 info/cl
 info/cl-1
 info/cl-2</programlisting>
        </step>

        <step>
          <para>Add a <maketarget>post-install</maketarget> target to the
            <filename>Makefile</filename> to call
            <maketarget>install-info</maketarget> with the installed
            info files.  (It is no longer necessary to create the
            <filename>dir</filename> file yourself;
            <command>install-info</command> automatically creates this
            file if it does not exist.)</para>

          <programlisting>Index: Makefile
===================================================================
RCS file: /usr/cvs/ports/editors/emacs/Makefile,v
retrieving revision 1.26
diff -u -r1.26 Makefile
--- Makefile    1996/11/19 13:14:40     1.26
+++ Makefile    1997/05/20 10:25:09     1.28
@@ -20,5 +20,8 @@
 post-install:
 .for file in emacs-19.34 emacsclient etags ctags b2m
        strip ${PREFIX}/bin/${file}
 .endfor
+.for info in emacs vip viper forms gnus mh-e cl sc dired-x ediff ccmode
+       install-info ${PREFIX}/info/${info} ${PREFIX}/info/dir
+.endfor

 .include &lt;bsd.port.mk&gt;</programlisting>
        </step>

        <step>
          <para>Edit <filename>pkg-plist</filename> and add equivalent
            <literal>@exec</literal> statements and also
            <literal>@unexec</literal> for
            <command>pkg_delete</command>.</para>

          <programlisting>Index: pkg-plist
===================================================================
RCS file: /usr/cvs/ports/editors/emacs/pkg-plist,v
retrieving revision 1.15
diff -u -r1.15 pkg-plist
--- pkg-plist       1997/03/04 08:04:00     1.15
+++ pkg-plist       1997/05/20 10:25:12     1.17
@@ -16,7 +14,14 @@
 man/man1/etags.1.gz
 man/man1/ctags.1.gz
+@unexec install-info --delete %D/info/emacs %D/info/dir
 :
+@unexec install-info --delete %D/info/ccmode %D/info/dir
 info/cl
 info/cl-1
@@ -87,6 +94,18 @@
 info/viper-3
 info/viper-4
+@exec install-info %D/info/emacs %D/info/dir
 :
+@exec install-info %D/info/ccmode %D/info/dir
 libexec/emacs/19.34/i386--freebsd/cvtmail
 libexec/emacs/19.34/i386--freebsd/digest-doc</programlisting>

          <note>
            <para>The <literal>@unexec install-info --delete</literal>
              commands have to be listed before the info files themselves so
              they can read the files. Also, the <literal>@exec
                install-info</literal> commands have to be after the info
              files and the <literal>@exec</literal> command that creates the
              the <filename>dir</filename> file.</para>
          </note>
        </step>

        <step>
          <para><link linkend="porting-testing">Test</link> and admire your
            work.  <!-- smiley --><emphasis>:-)</emphasis>.  Check the
            <filename>dir</filename> file before and after each step.</para>
        </step>
      </procedure>
    </chapter>

    <chapter>
      <title>The <filename>pkg-<replaceable>*</replaceable></filename> files</title>

      <para>There are some tricks we have not mentioned yet about the
        <filename>pkg-<replaceable>*</replaceable></filename> files
        that come in handy sometimes.</para>

      <sect1 id="porting-message">
        <title><filename>pkg-message</filename></title>

        <para>If you need to display a message to the installer, you may place
          the message in <filename>pkg-message</filename>.  This capability is
          often useful to display additional installation steps to be taken
          after a <command>pkg_add</command> or to display licensing
          information.</para>

        <note>
          <para>The <filename>pkg-message</filename> file does not need to be
            added to <filename>pkg-plist</filename>.  Also, it will not get
            automatically printed if the user is using the port, not the
            package, so you should probably display it from the
            <maketarget>post-install</maketarget> target yourself.</para>
        </note>
      </sect1>

      <sect1>
        <title><filename>pkg-install</filename></title>

        <para>If your port needs to execute commands when the binary package
          is installed with <command>pkg_add</command> you can do this via the
          <filename>pkg-install</filename> script.  This script will
          automatically be added to the package, and will be run twice by
          <command>pkg_add</command>.  The first time as
          <literal>&dollar;{SH} pkg-install &dollar;{PKGNAME}
          PRE-INSTALL</literal> and the second time as
          <literal>&dollar;{SH} pkg-install &dollar;{PKGNAME} POST-INSTALL</literal>. 
          <literal>&dollar;2</literal> can be tested to determine which mode
          the script is being run in.  The <envar>PKG_PREFIX</envar>
          environmental variable will be set to the package installation
          directory.  See &man.pkg.add.1; for
          additional information.</para>

        <note>
          <para>This script is not run automatically if you install the port
            with <command>make install</command>.  If you are depending on it
            being run, you will have to explicitly call it from your port's
            <filename>Makefile</filename>.</para>
        </note>
      </sect1>

      <sect1>
        <title><filename>pkg-req</filename></title>

        <para>If your port needs to determine if it should install or not, you
          can create a <filename>pkg-req</filename> &ldquo;requirements&rdquo;
          script.  It will be invoked automatically at
          installation/deinstallation time to determine whether or not
          installation/deinstallation should proceed.</para>
      </sect1>

      <sect1 id="porting-plist">
        <title>Changing <filename>pkg-plist</filename> based on make
          variables</title>

        <para>Some ports, particularly the p5- ports, need to change their
          <filename>pkg-plist</filename> depending on what options they are
          configured with (or version of perl, in the case of p5- ports).  To
          make this easy, any instances in the <filename>pkg-plist</filename> of
          <literal>%%OSREL%%</literal>, <literal>%%PERL_VER%%</literal>, and
          <literal>%%PERL_VERSION%%</literal> will be substituted for
          appropriately.  The value of <literal>%%OSREL%%</literal> is the
          numeric revision of the operating system (e.g.,
          <literal>2.2.7</literal>).  <literal>%%PERL_VERSION%%</literal> is
          the full version number of perl (e.g., <literal>5.00502</literal>)
          and <literal>%%PERL_VER%%</literal> is the perl version number minus
          the patchlevel (e.g., <literal>5.005</literal>).</para>

        <para>If you need to make other substitutions, you can set the
          <makevar>PLIST_SUB</makevar> variable with a list of
          <literal><replaceable>VAR</replaceable>=<replaceable>VALUE</replaceable></literal>
          pairs and instances of
          <literal>%%<replaceable>VAR</replaceable>%%</literal>' will be
          substituted with <replaceable>VALUE</replaceable> in the
          <filename>pkg-plist</filename>.</para>

        <para>For instance, if you have a port that installs many files in a
          version-specific subdirectory, you can put something like

          <programlisting>OCTAVE_VERSION= 2.0.13
PLIST_SUB=      OCTAVE_VERSION=${OCTAVE_VERSION}</programlisting>

          in the <filename>Makefile</filename> and use
          <literal>%%OCTAVE_VERSION%%</literal> wherever the version shows up
          in <filename>pkg-plist</filename>.  That way, when you upgrade the port,
          you will not have to change dozens (or in some cases, hundreds) of
          lines in the <filename>pkg-plist</filename>.</para>

        <para>This substitution (as well as addition of any <link
          linkend="porting-manpages">man pages</link>) will be done between
          the <maketarget>do-install</maketarget> and
          <maketarget>post-install</maketarget> targets, by reading from
          <makevar>PLIST</makevar> and writing to <makevar>TMPPLIST</makevar>
          (default:
          <filename><makevar>WRKDIR</makevar>/.PLIST.mktmp</filename>).  So if
          your port builds <makevar>PLIST</makevar> on the fly, do so in or
          before <maketarget>do-install</maketarget>.  Also, if your port
          needs to edit the resulting file, do so in
          <maketarget>post-install</maketarget> to a file named
          <makevar>TMPPLIST</makevar>.</para>
      </sect1>

      <sect1>
        <title id="porting-pkgfiles">Changing the names of
          <filename>pkg-<replaceable>*</replaceable></filename> files</title>

        <para>All the names of <filename>pkg-<replaceable>*</replaceable></filename> files
          are defined using variables so you can change them in your
          <filename>Makefile</filename> if need be.  This is especially useful
          when you are sharing the same <filename>pkg-<replaceable>*</replaceable></filename> files
          among  several ports or have to write to one of the above files (see
          <link linkend="porting-wrkdir">writing to places other than
          <makevar>WRKDIR</makevar></link> for why it is a bad idea to write
          directly in to the <filename>pkg-<replaceable>*</replaceable></filename> subdirectory).</para>

        <para>Here is a list of variable names and their default
          values.  (<makevar>PKGDIR</makevar> defaults to
          <makevar>${MASTERDIR}</makevar>.)</para>

        <informaltable frame="none">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Variable</entry>
                <entry>Default value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><makevar>COMMENT</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-comment</literal></entry>
              </row>

              <row>
                <entry><makevar>DESCR</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-descr</literal></entry>
              </row>

              <row>
                <entry><makevar>PLIST</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-plist</literal></entry>
              </row>

              <row>
                <entry><makevar>PKGINSTALL</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-install</literal></entry>
              </row>

              <row>
                <entry><makevar>PKGDEINSTALL</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-deinstall</literal></entry>
              </row>

              <row>
                <entry><makevar>PKGREQ</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-req</literal></entry>
              </row>

              <row>
                <entry><makevar>PKGMESSAGE</makevar></entry>
                <entry><literal>${PKGDIR}/pkg-message</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Please change these variables rather than overriding
          <makevar>PKG_ARGS</makevar>.  If you change
          <makevar>PKG_ARGS</makevar>, those files will not correctly be
          installed in <filename>/var/db/pkg</filename> upon install from a
          port.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Licensing Problems</title>

      <para>Some software packages have restrictive licenses or can be in
        violation of the law in some countries (such as violating a patent).
        What we can do with
        them varies a lot, depending on the exact wordings of the respective
        licenses.</para>

      <note>
        <para>It is your responsibility as a porter to read the licensing
          terms of the software and certifique-se that the FreeBSD project will
          not be held accountable for violating them by redistributing the
          source or compiled binaries either via ftp or CD-ROM.  If in doubt,
          please contact the &a.ports;.</para>
      </note>

      <para>There are two variables you can set in the Makefile to handle the
        situations that arise frequently:</para>

      <orderedlist>
        <listitem>
          <para>If the port has a &ldquo;do not sell for profit&rdquo; type of
            license, set the variable <makevar>NO_CDROM</makevar> to a string
            describing the reason why.  We will certifique-se such ports will not go
            into the CD-ROM come release time.  The distfile and package will
            still be available via ftp.</para>
        </listitem>

        <listitem>
          <para>If the resulting package needs to be built uniquely for each
            site, or the resulting binary package cannot be distributed due to
            licensing; set the variable <makevar>NO_PACKAGE</makevar> to a
            string describing the reason why.  We will certifique-se such packages
            will not go on the ftp site, nor  into the CD-ROM come release time.
            The distfile will still be included on both however.</para>
        </listitem>

        <listitem>
          <para>If the port has legal restrictions on who can use it (e.g.,
            patented stuff) or has a &ldquo;no commercial use&rdquo; license,
            set the variable <makevar>RESTRICTED</makevar> to be the string
            describing the reason why.  For such ports, the distfiles/packages
            will not be available even from our ftp sites.</para>
        </listitem>
      </orderedlist>

      <note>
        <para>The GNU General Public License (GPL), both version 1 and 2,
          should not be a problem for ports.</para>
      </note>

      <note>
        <para>If you are a committer, certifique-se you update the
          <filename>ports/LEGAL</filename> file too.</para>
      </note>
    </chapter>

    <chapter id="port-upgrading">
      <title>Upgrading</title>

      <para>When you notice that a port is out of date compared to the latest
        version from the original authors, first certifique-se you have the latest
        port.  You can find them in the
        <filename>ports/ports-current</filename> directory of the ftp mirror
        sites.  You may also use CVSup to keep your whole ports collection
        up-to-date, as described in <ulink url="../handbook/synching.html#CVSUP-CONFIG">the Handbook</ulink>.</para>

      <para>The next step is to send a mail to the maintainer, if one is
        listed in the port's <filename>Makefile</filename>.  That person may
        already be working on an upgrade, or have a reason to not upgrade the
        port right now (because of, for example, stability problems of the new
        version).</para>

      <para>If the maintainer asks you to do the upgrade or there is not any
        such person to begin with, please make the upgrade and send the
        recursive diff (either unified or context diff is fine, but port
        committers appear to prefer unified diff more) of the new and old
        ports directories to us (e.g., if your modified port directory is
        called <filename>superedit</filename> and the original as in our tree
        is <filename>superedit.bak</filename>, then send us the result of
        <command>diff -ruN superedit.bak superedit</command>).  Please examine
        the output to certifique-se all the changes make sense.  The best way to
        send us the diff is by including it via &man.send-pr.1; (category
        <literal>ports</literal>).  Please mention any added or deleted files
        in the message, as they have to be explicitly specified to CVS when
        doing a commit.  If the diff is more than about 20KB, please compress
        and uuencode it; otherwise, just include it in the PR as is.</para>

      <note>
        <para>Once again, please use &man.diff.1; and not &man.shar.1; to send
          updates to existing ports!</para>
      </note>
    </chapter>

    <chapter>
      <title><anchor id="porting-dads">Dos and Don'ts</title>

      <para>Here is a list of common dos and don'ts that you encounter during
        the porting process.You should check your own port against this list,
        but you can also check ports in the PR database that others have
        submitted.  Submit any comments on ports you check as described in
        <ulink url="../handbook/contrib-how.html#CONTRIB-GENERAL">Bug Reports and General
          Commentary</ulink>.  Checking ports in the PR database will both make
        it faster for us to commit them, and prove that you know what you are
        doing.</para>

      <sect1>
        <title>Strip Binaries</title>

        <para>Do strip binaries.  If the original source already strips the
          binaries, fine; otherwise you should add a
          <literal>post-install</literal> rule to to it yourself.  Here is an
          example:</para>

        <programlisting>post-install:
        strip ${PREFIX}/bin/xdl</programlisting>

        <para>Use the &man.file.1; command on the installed executable to
          check whether the binary is stripped or not.  If it does not say
          <literal>not stripped</literal>, it is stripped.</para>
      </sect1>

      <sect1>
        <title>INSTALL_* macros</title>

        <para>Do use the macros provided in <filename>bsd.port.mk</filename>
          to ensure correct modes and ownership of files in your own
          <maketarget>*-install</maketarget> targets.</para>

        <itemizedlist>
          <listitem>
            <para><makevar>INSTALL_PROGRAM</makevar> is a command to install
              binary executables.</para>
          </listitem>

          <listitem>
            <para><makevar>INSTALL_SCRIPT</makevar> is a command to install
              executable scripts.</para>
          </listitem>

          <listitem>
            <para><makevar>INSTALL_DATA</makevar> is a command to install
              sharable data.</para>
          </listitem>

          <listitem>
            <para><makevar>INSTALL_MAN</makevar> is a command to install
              manpages and other documentation (it does not compress
              anything).</para>
          </listitem>
        </itemizedlist>

        <para>These are basically the <command>install</command> command with
          all the appropriate flags.  See below for an example on how to use
          them.</para>
      </sect1>

      <sect1 id="porting-wrkdir">
        <title><makevar>WRKDIR</makevar></title>

        <para>Do not write anything to files outside
          <makevar>WRKDIR</makevar>.  <makevar>WRKDIR</makevar> is the only
          place that is guaranteed to be writable during the port build (see
          <ulink url="../handbook/ports-using.html#PORTS-CD">compiling ports from CDROM</ulink> for an
          example of building ports from a read-only tree).  If you need to
          modify one of the <filename>pkg-<replaceable>*</replaceable></filename>
          files, do so by <link
          linkend="porting-pkgfiles">redefining a variable</link>, not by
          writing over it.</para>
      </sect1>

      <sect1 id="porting-wrkdirprefix">
        <title><makevar>WRKDIRPREFIX</makevar></title>

        <para>Certifique-se your port honors <makevar>WRKDIRPREFIX</makevar>.
          Most ports do not have to worry about this.  In particular, if you
          are referring to a <makevar>WRKDIR</makevar> of another port, note
          that the correct location is
          <filename><makevar>WRKDIRPREFIX</makevar><makevar>PORTSDIR</makevar>/<replaceable>subdir</replaceable>/<replaceable>name</replaceable>/work</filename> not <filename><makevar>PORTSDIR</makevar>/<replaceable>subdir</replaceable>/<replaceable>name</replaceable>/work</filename> or <filename><makevar>.CURDIR</makevar>/../../<replaceable>subdir</replaceable>/<replaceable>name</replaceable>/work</filename> or some such.</para>

        <para>Also, if you are defining <makevar>WRKDIR</makevar> yourself,
          certifique-se you prepend
          <literal>&dollar;{WRKDIRPREFIX}&dollar;{.CURDIR}</literal> in the
          front.</para>
      </sect1>

      <sect1 id="porting-versions">
        <title>Differentiating operating systems and OS versions</title>

        <para>You may come across code that needs modifications or conditional
          compilation based upon what version of UNIX it is running under.  If
          you need to make such changes to the code for conditional
          compilation, certifique-se you make the changes as general as possible
          so that we can back-port code to FreeBSD 1.x systems and cross-port
          to other BSD systems such as 4.4BSD from CSRG, BSD/386, 386BSD,
          NetBSD, and OpenBSD.</para>

        <para>The preferred way to tell 4.3BSD/Reno (1990) and newer versions
          of the BSD code apart is by using the <literal>BSD</literal> macro
          defined in <filename>&lt;sys/param.h&gt;</filename>.  Hopefully that
          file is already included; if not, add the code:</para>

        <programlisting>#if (defined(__unix__) || defined(unix)) &amp;&amp; !defined(USG)
#include &lt;sys/param.h&gt;
#endif</programlisting>

        <para>to the proper place in the <filename>.c</filename> file.  We
          believe that every system that defines these two symbols has
          <filename>sys/param.h</filename>.  If you find a system that
          does not, we would like to know.  Please send mail to the
          &a.ports;.</para>

        <para>Another way is to use the GNU Autoconf style of doing
          this:</para>

        <programlisting>#ifdef HAVE_SYS_PARAM_H
#include &lt;sys/param.h&gt;
#endif</programlisting>

        <para>Do not forget to add <literal>-DHAVE_SYS_PARAM_H</literal> to the
          <makevar>CFLAGS</makevar> in the <filename>Makefile</filename> for
          this method.</para>

        <para>Once you have <filename>sys/param.h</filename> included, you may
          use:</para>

        <programlisting>#if (defined(BSD) &amp;&amp; (BSD &gt;= 199103))</programlisting>

        <para>to detect if the code is being compiled on a 4.3 Net2 code base
          or newer (e.g. FreeBSD 1.x, 4.3/Reno, NetBSD 0.9, 386BSD, BSD/386
          1.1 and below).</para>

        <para>Use:</para>

        <programlisting>#if (defined(BSD) &amp;&amp; (BSD &gt;= 199306))</programlisting>

        <para>to detect if the code is being compiled on a 4.4 code base or
          newer (e.g. FreeBSD 2.x, 4.4, NetBSD 1.0, BSD/386 2.0 or
          above).</para>

        <para>The value of the <literal>BSD</literal> macro is
          <literal>199506</literal> for the 4.4BSD-Lite2 code base.  This is
          stated for informational purposes only.  It should not be used to
          distinguish between versions of FreeBSD based only on 4.4-Lite vs.
          versions that have merged in changes from 4.4-Lite2.  The
          <literal>__FreeBSD__</literal> macro should be used instead.</para>

        <para>Use sparingly:</para>

        <itemizedlist>
          <listitem>
            <para><literal>__FreeBSD__</literal> is defined in all versions of
              FreeBSD.  Use it if the change you are making
              <emphasis>only</emphasis> affects FreeBSD.  Porting gotchas like
              the use of <literal>sys_errlist[]</literal> vs
              <function>strerror()</function> are Berkeleyisms, not FreeBSD
              changes.</para>
          </listitem>

          <listitem>
            <para>In FreeBSD 2.x, <literal>__FreeBSD__</literal> is defined to
              be <literal>2</literal>.  In earlier versions, it is
              <literal>1</literal>.  Later versions will bump it to match
              their major version number.</para>
          </listitem>

          <listitem>
            <para>If you need to tell the difference between a FreeBSD 1.x
              system and a FreeBSD 2.x or 3.x system, usually the right answer
              is to use the <literal>BSD</literal> macros described above.  If
              there actually is a FreeBSD specific change (such as special
              shared library options when using <command>ld</command>) then it
              is OK to use <literal>__FreeBSD__</literal> and <literal>#if
                __FreeBSD__ &gt; 1</literal> to detect a FreeBSD 2.x and later
              system.  If you need more granularity in detecting FreeBSD
              systems since 2.0-RELEASE you can use the following:</para>

            <programlisting>#if __FreeBSD__ &gt;= 2
#include &lt;osreldate.h&gt;
#    if __FreeBSD_version &gt;= 199504
         /* 2.0.5+ release specific code here */
#    endif
#endif</programlisting>

		<informaltable frame="none">
		<tgroup cols="2">
		<thead>
		  <row>
		    <entry>Release</entry>
		    <entry><literal>__FreeBSD_version</literal></entry>
		  </row>
		</thead>

		<tbody>
		  <row>
		    <entry>2.0-RELEASE</entry>
		    <entry>119411</entry>
		  </row>

		  <row>
		  <entry>2.1-CURRENT</entry>
		  <entry>199501, 199503</entry>
		  </row>

		  <row>
		  <entry>2.0.5-RELEASE</entry>
		  <entry>199504</entry>
		  </row>

		  <row>
		  <entry>2.2-CURRENT before 2.1</entry>
		  <entry>199508</entry>
		  </row>

		  <row>
		  <entry>2.1.0-RELEASE</entry>
		  <entry>199511</entry>
		  </row>

		  <row>
		  <entry>2.2-CURRENT before 2.1.5</entry>
		  <entry>199512</entry>
		  </row>

		  <row>
		  <entry>2.1.5-RELEASE</entry>
		  <entry>199607</entry>
		  </row>

		  <row>
		  <entry>2.2-CURRENT before 2.1.6</entry>
		  <entry>199608</entry>
		  </row>

		  <row>
		  <entry>2.1.6-RELEASE</entry>
		  <entry>199612</entry>
		  </row>

		  <row>
		  <entry>2.1.7-RELEASE</entry>
		  <entry>199612</entry>
		  </row>

		  <row>
		  <entry>2.2-RELEASE</entry>
		  <entry>220000</entry>
		  </row>

		  <row>
		  <entry>2.2.1-RELEASE</entry>
		  <entry>220000 (no change)</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after 2.2.1-RELEASE</entry>
		  <entry>220000 (no change)</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after texinfo-3.9</entry>
		  <entry>221001</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after top</entry>
		  <entry>221002</entry>
		  </row>

		  <row>
		  <entry>2.2.2-RELEASE</entry>
		  <entry>222000</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after 2.2.2-RELEASE</entry>
		  <entry>222001</entry>
		  </row>

		  <row>
		  <entry>2.2.5-RELEASE</entry>
		  <entry>225000</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after 2.2.5-RELEASE</entry>
		  <entry>225001</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after ldconfig -R merge</entry>
		  <entry>225002</entry>
		  </row>

		  <row>
		  <entry>2.2.6-RELEASE</entry>
		  <entry>226000</entry>
		  </row>

		  <row>
		  <entry>2.2.7-RELEASE</entry>
		  <entry>227000</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after 2.2.7-RELEASE</entry>
		  <entry>227001</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after &man.semctl.2; change</entry>
		  <entry>227002</entry>
		  </row>

		  <row>
		  <entry>2.2.8-RELEASE</entry>
		  <entry>228000</entry>
		  </row>

		  <row>
		  <entry>2.2-STABLE after 2.2.8-RELEASE</entry>
		  <entry>228001</entry>
		  </row>

		  <row>
		  <entry>3.0-CURRENT before &man.mount.2; change</entry>
		  <entry>300000</entry>
		  </row>

		  <row>
		  <entry>3.0-CURRENT after &man.mount.2; change</entry>
		  <entry>300001</entry>
		  </row>

		  <row>
		  <entry>3.0-CURRENT after &man.semctl.2; change</entry>
		  <entry>300002</entry>
		  </row>

		  <row>
		  <entry>3.0-CURRENT after ioctl arg changes</entry>
		  <entry>300003</entry>
		  </row>

		  <row>
		  <entry>3.0-CURRENT after ELF conversion</entry>
		  <entry>300004</entry>
		  </row>

		  <row>
		  <entry>3.0-RELEASE</entry>
		  <entry>300005</entry>
		  </row>

		  <row>
		  <entry>3.0-CURRENT after 3.0-RELEASE</entry>
		  <entry>300006</entry>
		  </row>

		  <row>
		  <entry>3.0-STABLE after 3/4 branch</entry>
		  <entry>300007</entry>
		  </row>

		  <row>
		  <entry>3.1-RELEASE</entry>
		  <entry>310000</entry>
		  </row>

		  <row>
		  <entry>3.1-STABLE after 3.1-RELEASE</entry>
		  <entry>310001</entry>
		  </row>

		  <row>
		  <entry>3.1-STABLE after C++ constructor/destructor order
		  change</entry>
		  <entry>310002</entry>
		  </row>

		  <row>
		  <entry>3.2-RELEASE</entry>
		  <entry>320000</entry>
		  </row>

		  <row>
		  <entry>3.2-STABLE</entry>
		  <entry>320001</entry>
		  </row>

		  <row>
		  <entry>3.2-STABLE after binary-incompatible IPFW and
		  socket changes</entry>
		  <entry>320002</entry>
		  </row>

		  <row>
		  <entry>3.3-RELEASE</entry>
		  <entry>330000</entry>
		  </row>

		  <row>
		  <entry>3.3-STABLE</entry>
		  <entry>330001</entry>
		  </row>

		  <row>
		  <entry>3.3-STABLE after adding &man.mkstemp.3;
		    to libc</entry>
		  <entry>330002</entry>
		  </row>

		  <row>
		    <entry>3.4-RELEASE</entry>
		    <entry>340000</entry>
		  </row>

		  <row>
		    <entry>3.4-STABLE</entry>
		    <entry>340001</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after 3.4 branch</entry>
		  <entry>400000</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after change in dynamic linker
		  handling</entry>
		  <entry>400001</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after C++ constructor/destructor
		  order change</entry>
		  <entry>400002</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after functioning &man.dladdr.3;</entry>
		  <entry>400003</entry>
		  </row>

		  <row>
		    <entry>4.0-CURRENT after __deregister_frame_info dynamic
		    linker bug fix (also 4.0-CURRENT after EGCS 1.1.2
		    integration)
		    </entry>
		    <entry>400004</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after &man.suser.9; API change
		  (also 4.0-CURRENT after newbus)</entry>
		  <entry>400005</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after cdevsw registration change</entry>
		  <entry>400006</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after the addition of so_cred for
		  socket level credentials</entry>
		  <entry>400007</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after the addition of a poll syscall
		  wrapper to libc_r</entry>
		  <entry>400008</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after the change of the kernel's
		  <literal>dev_t</literal> type to <literal>struct
		  specinfo</literal> pointer</entry>
		  <entry>400009</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after fixing a hole
		    in &man.jail.2;</entry>
		  <entry>400010</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after the <literal>sigset_t</literal>
		  datatype change</entry>
		  <entry>400011</entry>
		  </row>

		  <row>
		  <entry>4.0-CURRENT after the cutover to the GCC 2.95.2
		  compiler</entry>
		  <entry>400012</entry>
		  </row>

		  <row>
		    <entry>4.0-CURRENT after adding pluggable linux-mode
		    ioctl handlers</entry>
		    <entry>400013</entry>
		  </row>

		  <row>
		    <entry>4.0-CURRENT after importing OpenSSL</entry>
		    <entry>400014</entry>
		  </row>

		  <row>
		    <entry>4.0-CURRENT after the C++ ABI change in GCC 2.95.2
		    from -fvtable-thunks to -fno-vtable-thunks by
		    default</entry>
		    <entry>400015</entry>
		  </row>

		  <row>
		    <entry>4.0-CURRENT after importing OpenSSH</entry>
		    <entry>400016</entry>
		  </row>

		  <row>
		    <entry>4.0-RELEASE</entry>
		    <entry>400017</entry>
		  </row>

		  <row>
		    <entry>4.0-STABLE after 4.0-RELEASE</entry>
		    <entry>400018</entry>
		  </row>

		  <row>
		    <entry>4.0-STABLE after merging libxpg4 code into
		    libc.</entry>
		    <entry>400020</entry>
		  </row>

		  <row>
		    <entry>4.0-STABLE after upgrading Binutils to 2.10.0, ELF
		    branding changes, and tcsh in the base system.</entry>
		    <entry>400021</entry>
		  </row>

		  <row>
		    <entry>4.1-RELEASE</entry>
		    <entry>410000</entry>
		  </row>

		  <row>
		    <entry>4.1-STABLE after 4.1-RELEASE</entry>
		    <entry>410001</entry>
		  </row>

		  <row>
		    <entry>4.1-STABLE after &man.setproctitle.3; moved from
		    libutil to libc.</entry>
		    <entry>410002</entry>
		  </row>

		  <row>
		    <entry>4.1.1-RELEASE</entry>
		    <entry>411000</entry>
		  </row>

		  <row>
		    <entry>4.1.1-STABLE after 4.1.1-RELEASE</entry>
		    <entry>411001</entry>
		  </row>

		  <row>
		    <entry>4.2-RELEASE</entry>
		    <entry>420000</entry>
		  </row>

		  <row>
		    <entry>4.2-STABLE after combining libgcc.a and
		    libgcc_r.a, and associated GCC linkage changes.</entry>
		    <entry>420001</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT</entry>
		    <entry>500000</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after adding addition ELF header fields,
		    and changing our ELF binary branding method.</entry>
		    <entry>500001</entry>
		  </row>

                  <row>
                    <entry>5.0-CURRENT after kld metadata changes.</entry>
                    <entry>500002</entry>
                  </row>

                  <row>
                    <entry>5.0-CURRENT after buf/bio changes.</entry>
                    <entry>500003</entry>
                  </row>

                  <row>
                    <entry>5.0-CURRENT after binutils upgrade.</entry>
                    <entry>500004</entry>
                  </row>

                  <row>
                    <entry>5.0-CURRENT after merging libxpg4 code into
                    libc and after TASKQ interface introduction.</entry>
                    <entry>500005</entry>
                  </row>

                  <row>
                    <entry>5.0-CURRENT after the addition of AGP
                    interfaces.</entry>
                    <entry>500006</entry>
                  </row>

		  <row>
		    <entry>5.0-CURRENT after Perl upgrade to 5.6.0</entry>
		    <entry>500007</entry>
		  </row>

                  <row>
                    <entry>5.0-CURRENT after the update of KAME code to
                    2000/07 sources.</entry>
                    <entry>500008</entry>
                  </row>

		  <row>
		    <entry>5.0-CURRENT after ether_ifattach() and
		    ether_ifdetach() changes.</entry>
		    <entry>500009</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after changing mtree defaults	
		    back to original variant, adding -L to follow 
		    symlinks.</entry>
		    <entry>500010</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after kqueue API changed.</entry>
		    <entry>500011</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after &man.setproctitle.3; moved from
		    libutil to libc.</entry>
		    <entry>500012</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after the first SMPng commit.</entry>
		    <entry>500013</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after &lt;sys/select.h&gt; moved to
		    &lt;sys/selinfo.h&gt;.</entry>
		    <entry>500014</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after combining libgcc.a and
		    libgcc_r.a, and associated GCC linkage changes.</entry>
		    <entry>500015</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after change allowing libc and libc_r
		    to be linked together, deprecating -pthread option.</entry>
		    <entry>500016</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after switch from struct ucred to
                    struct xucred to stabilize kernel-exported API for
                    mountd et al.</entry>
		    <entry>500017</entry>
		  </row>

		  <row>
		    <entry>5.0-CURRENT after addition of CPUTYPE make variable
                    for controlling CPU-specific optimizations.</entry>
		    <entry>500018</entry>
		  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </listitem>
        </itemizedlist>

        <note>
          <para>Note that 2.2-STABLE sometimes identifies itself as
            &ldquo;2.2.5-STABLE&rdquo; after the 2.2.5-RELEASE.  The pattern
            used to be year followed by the month, but we decided to change it
            to a more straightforward major/minor system starting from 2.2.
            This is because the parallel development on several branches made
            it infeasible to classify the releases simply by their real
            release dates.  If you are making a port now, you do not have to
            worry about old -CURRENTs; they are listed here just for your
            reference.</para>
        </note>

        <para>In the hundreds of ports that have been done, there have only
          been one or two cases where <literal>__FreeBSD__</literal> should
          have been used.  Just because an earlier port screwed up and used it
          in the wrong place does not mean you should do so too.</para>
      </sect1>

      <sect1>
        <title>Writing something after
          <filename>bsd.port.mk</filename></title>

        <para>Do not write anything after the <literal>.include
            &lt;bsd.port.mk&gt;</literal> line.  It usually can be avoided by
          including <filename>bsd.port.pre.mk</filename> somewhere in the
          middle of your <filename>Makefile</filename> and
          <filename>bsd.port.post.mk</filename> at the end.</para>

        <note>
          <para>You need to include either the
            <filename>pre.mk</filename>/<filename>post.mk</filename> pair or
            <filename>bsd.port.mk</filename> only; do not mix these two.</para>
        </note>

        <para><filename>bsd.port.pre.mk</filename> only defines a few
          variables, which can be used in tests in the
          <filename>Makefile</filename>, <filename>bsd.port.post.mk</filename>
          defines the rest.</para>

        <para>Here are some important variables defined in
          <filename>bsd.port.pre.mk</filename> (this is not the complete list,
          please read <filename>bsd.port.mk</filename> for the complete
          list).</para>

        <informaltable frame="none">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Variable</entry>
                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><makevar>ARCH</makevar></entry>
                <entry>The architecture as returned by <command>uname
                    -m</command> (e.g., <literal>i386</literal>)</entry>
              </row>

              <row>
                <entry><makevar>OPSYS</makevar></entry>
                <entry>The operating system type, as returned by
                  <command>uname -s</command> (e.g.,
                  <literal>FreeBSD</literal>)</entry>
              </row>

              <row>
                <entry><makevar>OSREL</makevar></entry>
                <entry>The release version of the operating system (e.g.,
                  <literal>2.1.5</literal> or
                  <literal>2.2.7</literal>)</entry>
              </row>

              <row>
                <entry><makevar>OSVERSION</makevar></entry>
                <entry>The numeric version of the operating system, same as
                  <link
                    linkend="porting-versions"><literal>__FreeBSD_version</literal></link>.</entry>
              </row>

              <row>
                <entry><makevar>PORTOBJFORMAT</makevar></entry>
                <entry>The object format of the system
                  (<literal>aout</literal> or <literal>elf</literal>)</entry>
              </row>

              <row>
                <entry><makevar>LOCALBASE</makevar></entry>
                <entry>The base of the &ldquo;local&rdquo; tree (e.g.,
                  <literal>/usr/local/</literal>)</entry>
              </row>

              <row>
                <entry><makevar>X11BASE</makevar></entry>
                <entry>The base of the &ldquo;X11&rdquo; tree (e.g.,
                  <literal>/usr/X11R6</literal>)</entry>
              </row>

              <row>
                <entry><makevar>PREFIX</makevar></entry>
                <entry>Where the port installs itself (see <link
                    linkend="porting-prefix">more on
                    <makevar>PREFIX</makevar></link>).</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <note>
          <para>If you have to define the variables
            <makevar>USE_IMAKE</makevar>, <makevar>USE_X_PREFIX</makevar>, or
            <makevar>MASTERDIR</makevar>, do so before including
            <filename>bsd.port.pre.mk</filename>.</para>
        </note>

        <para>Here are some examples of things you can write after
          <filename>bsd.port.pre.mk</filename>:</para>

        <programlisting># no need to compile lang/perl5 if perl5 is already in system
.if ${OSVERSION} > 300003
BROKEN= perl is in system
.endif

# only one shlib version number for ELF
.if ${PORTOBJFORMAT} == "elf"
TCL_LIB_FILE=  ${TCL_LIB}.${SHLIB_MAJOR}
.else
TCL_LIB_FILE=  ${TCL_LIB}.${SHLIB_MAJOR}.${SHLIB_MINOR}
.endif

# software already makes link for ELF, but not for a.out
post-install:
.if ${PORTOBJFORMAT} == "aout"
       ${LN} -sf liblinpack.so.1.0 ${PREFIX}/lib/liblinpack.so
.endif</programlisting>
      </sect1>

      <sect1>
        <title>Install additional documentation</title>

        <para>If your software has some documentation other than the standard
          man and info pages that you think is useful for the user, install it
          under <filename><makevar>PREFIX</makevar>/share/doc</filename>.
          This can be done, like the previous item, in the
          <maketarget>post-install</maketarget> target.</para>

        <para>Create a new directory for your port.  The directory name should
          reflect what the port is.  This usually means
          <makevar>PORTNAME</makevar>. However, if you
          think the user might want different versions of the port to be
          installed at the same time, you can use the whole
          <makevar>PKGNAME</makevar>.</para>

        <para>Make the installation dependent to the variable
          <makevar>NOPORTDOCS</makevar> so that users can disable it in
          <filename>/etc/make.conf</filename>, like this:</para>

        <programlisting>post-install:
.if !defined(NOPORTDOCS)
        ${MKDIR} ${PREFIX}/share/doc/xv
        ${INSTALL_MAN} ${WRKSRC}/docs/xvdocs.ps ${PREFIX}/share/doc/xv
.endif</programlisting>

        <para>Do not forget to add them to <filename>pkg-plist</filename> too.
          (Do not worry about <makevar>NOPORTDOCS</makevar> here; there is
          currently no way for the packages to read variables from
          <filename>/etc/make.conf</filename>.)</para>

        <para>You can also use the <filename>pkg-message</filename> file to
          display messages upon installation.  See the <link
          linkend="porting-message">using
          <filename>pkg-message</filename></link> section for
          details.</para>

        <note>
          <para><filename>pkg-message</filename> does not need to be added to
            <filename>pkg-plist</filename>.</para>
        </note>
      </sect1>

      <sect1>
        <title><makevar>DIST_SUBDIR</makevar></title>

        <para>Do not let your port clutter
          <filename>/usr/ports/distfiles</filename>.  If your port requires a
          lot of files to be fetched, or contains a file that has a name that
          might conflict with other ports (e.g.,
          <filename>Makefile</filename>), set <makevar>DIST_SUBDIR</makevar>
          to the name of the port (<literal>${PORTNAME}</literal> or
          <literal>${PKGNAMEPREFIX}${PORTNAME}</literal>
          should work fine).  This will change
          <makevar>DISTDIR</makevar> from the default
          <filename>/usr/ports/distfiles</filename> to
          <filename>/usr/ports/distfiles/<makevar>DIST_SUBDIR</makevar></filename>,
          and in effect puts everything that is required for your port into
          that subdirectory.</para>

        <para>It will also look at the subdirectory with the same name on the
          backup master site at <filename>ftp.FreeBSD.org</filename>.
          (Setting <makevar>DISTDIR</makevar> explicitly in your
          <makevar>Makefile</makevar> will not accomplish this, so please use
          <makevar>DIST_SUBDIR</makevar>.)</para>

        <note>
          <para>This does not affect the <makevar>MASTER_SITES</makevar> you
            define in your Makefile.</para>
        </note>
      </sect1>

      <sect1>
        <title>Package information</title>

        <para>Do include package information, i.e.
          <filename>pkg-comment</filename>, <filename>pkg-descr</filename>, and
          <filename>pkg-plist</filename>.</para>

        <note>
          <para>Note that these files are not used only for packaging anymore,
            and are <emphasis>mandatory</emphasis> now, even if
            <makevar>NO_PACKAGE</makevar> is set.</para>
        </note>
      </sect1>

      <sect1>
        <title>RCS strings</title>

        <para>Do not put RCS strings in patches.  CVS will mangle them when we
          put the files into the ports tree, and when we check them out again,
          they will come out different and the patch will fail.  RCS strings
          are surrounded by dollar (<literal>&dollar;</literal>) signs, and
          typically start with <literal>&dollar;Id</literal> or
          <literal>&dollar;RCS</literal>.</para>
      </sect1>

      <sect1>
        <title>Recursive diff</title>

        <para>Using the recurse (<option>-r</option>) option to
          <command>diff</command> to generate patches is fine, but please take
          a look at the resulting patches to certifique-se you do not have any
          unnecessary junk in there.  In particular, diffs between two backup
          files, <filename>Makefiles</filename> when the port uses
          <command>Imake</command> or GNU <command>configure</command>, etc.,
          are unnecessary and should be deleted.  If you had to edit
          <filename>configure.in</filename> and run
          <command>autoconf</command> to regenerate
          <command>configure</command>, do not take the diffs of
          <command>configure</command> (it often grows to a few thousand
          lines!); define <literal>USE_AUTOCONF=yes</literal> and take the
          diffs of <filename>configure.in</filename>.</para>

        <para>Also, if you had to delete a file, then you can do it in the
          <maketarget>post-extract</maketarget> target rather than as part of
          the patch.  Once you are happy with the resulting diff, please split
          it up into one source file per patch file.</para>
      </sect1>

      <sect1 id="porting-prefix">
        <title><makevar>PREFIX</makevar></title>

        <para>Do try to make your port install relative to
          <makevar>PREFIX</makevar>.  (The value of this variable will be set
          to <makevar>LOCALBASE</makevar> (default
          <filename>/usr/local</filename>), unless
          <makevar>USE_X_PREFIX</makevar> or <makevar>USE_IMAKE</makevar> is
          set, in which case it will be <makevar>X11BASE</makevar> (default
          <filename>/usr/X11R6</filename>).)</para>

        <para>Not hard-coding <filename>/usr/local</filename> or
          <filename>/usr/X11R6</filename> anywhere in the source will make the
          port much more flexible and able to cater to the needs of other
          sites.  For X ports that use <command>imake</command>, this is
          automatic; otherwise, this can often be done by simply replacing the
          occurrences of <filename>/usr/local</filename> (or
          <filename>/usr/X11R6</filename> for X ports that do not use imake)
          in the various scripts/Makefiles in the port to read
          <makevar>PREFIX</makevar>, as this variable is automatically passed
          down to every stage of the build and install processes.</para>

	<para>Certifique-se your application isn't installing things in 
	<filename>/usr/local</filename> instead of <makevar>PREFIX</makevar>.
	A quick test for this is to do this is:</para>

	<screen>&prompt.root; <userinput>make clean; make package PREFIX=/var/tmp/<replaceable>port-name</replaceable></userinput></screen>
	
	<para>If anything is installed outside of <makevar>PREFIX</makevar>, 
	making the package creation process will complain that it
	can't find the files.</para>

	<para>This does not test for the existence of internal references,
	or correct use of <makevar>LOCALBASE</makevar> for references to
	files from other ports.  Testing the installation in
	<filename>/var/tmp/<replaceable>port-name</replaceable></filename>
	to do that that while you have it installed would do that.</para>

        <para>Do not set <makevar>USE_X_PREFIX</makevar> unless your port
          truly requires it (i.e., it links against X libs or it needs to
          reference files in <makevar>X11BASE</makevar>).</para>

        <para>The variable <makevar>PREFIX</makevar> can be reassigned in your
          <filename>Makefile</filename> or in the user's environment.
          However, it is strongly discouraged for individual ports to set this
          variable explicitly in the <filename>Makefiles</filename>.</para>

        <para>Also, refer to programs/files from other ports with the
          variables mentioned above, not explicit pathnames.  For instance, if
          your port requires a macro <literal>PAGER</literal> to be the full
          pathname of <command>less</command>, use the compiler flag:

          <programlisting>-DPAGER=\"&dollar;{PREFIX}/bin/less\"</programlisting>

          or

          <programlisting>-DPAGER=\"&dollar;{LOCALBASE}/bin/less\"</programlisting>

          if this is an X port, instead of
          <literal>-DPAGER=\"/usr/local/bin/less\".</literal> This way it will
          have a better chance of working if the system administrator has
          moved the whole `/usr/local' tree somewhere else.</para>
      </sect1>

      <sect1>
        <title>Subdirectories</title>

        <para>Try to let the port put things in the right subdirectories of
          <makevar>PREFIX</makevar>.  Some ports lump everything and put it in
          the subdirectory with the port's name, which is incorrect.  Also,
          many ports put everything except binaries, header files and manual
          pages in the a subdirectory of <filename>lib</filename>, which does
          not bode well with the BSD paradigm.  Many of the files should be
          moved to one of the following: <filename>etc</filename>
          (setup/configuration files), <filename>libexec</filename>
          (executables started internally), <filename>sbin</filename>
          (executables for superusers/managers), <filename>info</filename>
          (documentation for info browser) or  <filename>share</filename>
          (architecture independent files).  See man &man.hier.7; for details,
          the rules governing
          <filename>/usr</filename> pretty much apply to
          <filename>/usr/local</filename> too.  The exception are ports
          dealing with USENET &ldquo;news&rdquo;.  They may use
          <filename><makevar>PREFIX</makevar>/news</filename> as a destination
          for their files.</para>
      </sect1>

      <sect1 id="porting-cleaning">
        <title>Cleaning up empty directories</title>

        <para>Do make your ports clean up after themselves when they are
          deinstalled.  This is usually accomplished by adding
          <literal>@dirrm</literal> lines for all directories that are
          specifically created by the port.  You need to delete subdirectories
          before you can delete parent directories.</para>

        <programlisting> :
lib/X11/oneko/pixmaps/cat.xpm
lib/X11/oneko/sounds/cat.au
 :
@dirrm lib/X11/oneko/pixmaps
@dirrm lib/X11/oneko/sounds
@dirrm lib/X11/oneko</programlisting>

        <para>However, sometimes <literal>@dirrm</literal> will give you
          errors because other ports also share the same subdirectory.  You
          can call <command>rmdir</command> from <literal>@unexec</literal> to
          remove only empty directories without warning.</para>

        <programlisting>@unexec rmdir %D/share/doc/gimp 2>/dev/null || true</programlisting>

        <para>This will neither print any error messages nor cause
          <command>pkg_delete</command> to exit abnormally even if
          <filename><makevar>PREFIX</makevar>/share/doc/gimp</filename> is not
          empty due to other ports installing some files in there.</para>
      </sect1>

      <sect1>
        <title>UIDs</title>

        <para>If your port requires a certain user to be on the installed
          system, let the <filename>pkg-install</filename> script call
          <command>pw</command> to create it automatically.  Look at
          <filename>net/cvsup-mirror</filename> for an example.</para>

        <para>If your port must use the same user/group ID number when it is
          installed as a binary package as when it was compiled, then you must
          choose a free UID from 50 to 99 and register it below.  Look at
          <filename>japanese/Wnn</filename> for an example.</para>

        <para>Certifique-se you do not use a UID already used by the system or
          other ports.  This is the current list of UIDs between 50 and
          99.</para>

        <programlisting>majordom:*:54:54:Majordomo Pseudo User:/usr/local/majordomo:/nonexistent
cyrus:*:60:60:the cyrus mail server:/nonexistent:/nonexistent
gnats:*:61:1:GNATS database owner:/usr/local/share/gnats/gnats-db:/bin/sh
uucp:*:66:66:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico
xten:*:67:67:X-10 daemon:/usr/local/xten:/nonexistent
pop:*:68:6:Post Office Owner (popper):/nonexistent:/nonexistent
wnn:*:69:7:Wnn:/nonexistent:/nonexistent
ifmail:*:70:66:Ifmail user:/nonexistent:/nonexistent
pgsql:*:70:70:PostgreSQL pseudo-user:/usr/local/pgsql:/bin/sh
ircd:*:72:72:IRCd hybrid:/nonexistent:/nonexistent
alias:*:81:81:QMail user:/var/qmail/alias:/nonexistent
qmaill:*:83:81:QMail user:/var/qmail:/nonexistent
qmaild:*:82:81:QMail user:/var/qmail:/nonexistent
qmailq:*:85:82:QMail user:/var/qmail:/nonexistent
qmails:*:87:82:QMail user:/var/qmail:/nonexistent
qmailp:*:84:81:QMail user:/var/qmail:/nonexistent
qmailr:*:86:82:QMail user:/var/qmail:/nonexistent
msql:*:87:87:mSQL-2 pseudo-user:/var/db/msqldb:/bin/sh
mysql:*:88:88:MySQL Daemon:/var/db/mysql:/sbin/nologin
vpopmail:*:89:89::0:0:User &:/usr/local/vpopmail:/nonexistent</programlisting>

        <para>Please include a notice when you submit a port (or an upgrade)
          that reserves a new UID or GID in this range.  This allows us to
          keep the list of reserved IDs up to date.</para>
      </sect1>

      <sect1>
        <title>Do things rationally</title>

        <para>The <filename>Makefile</filename> should do things simply and
          reasonably.  If you can make it a couple of lines shorter or more
          readable, then do so.  Examples include using a make
          <literal>.if</literal> construct instead of a shell
          <literal>if</literal> construct, not redefining
          <maketarget>do-extract</maketarget> if you can redefine
          <makevar>EXTRACT*</makevar> instead, and using
          <makevar>GNU_CONFIGURE</makevar> instead of <literal>CONFIGURE_ARGS
            += --prefix=&dollar;{PREFIX}</literal>.</para>
      </sect1>

      <sect1>
        <title>Respect <makevar>CFLAGS</makevar></title>

        <para>The port should respect the <makevar>CFLAGS</makevar> variable.
          If it does not, please add <literal>NO_PACKAGE=ignores
            cflags</literal> to the <filename>Makefile</filename>.</para>

	<para>An example of a <filename>Makefile</filename> respecting
	  the <makevar>CFLAGS</makevar> variable follows.  Note the
	  <makevar>+=</makevar>:</para>

	<programlisting>CFLAGS += -Wall -Werror</programlisting>

	<para>Here is an example which does not respect the
	  <makevar>CFLAGS</makevar> variable:</para>

	<programlisting>CFLAGS = -Wall -Werror</programlisting>

	<para>The <makevar>CFLAGS</makevar> variable is defined on
	  FreeBSD systems in <filename>/etc/make.conf</filename>.  The
	  first example appends additional flags to the
	  <makevar>CFLAGS</makevar> variable, preserving any system-wide
	  definitions.  The second example clobbers anything previously
	  defined.</para>
      </sect1>

      <sect1>
        <title>Configuration files</title>

        <para>If your port requires some configuration files in
          <filename><makevar>PREFIX</makevar>/etc</filename>, do
          <emphasis>not</emphasis> just install them and list them in
          <filename>pkg-plist</filename>.  That will cause
          <command>pkg_delete</command> to delete files carefully edited by
          the user and a new installation to wipe them out.</para>

        <para>Instead, install sample files with a suffix
          (<filename><replaceable>filename</replaceable>.sample</filename>
          will work well) and print out a <link
            linkend="porting-message">message</link> pointing out that the
          user has to copy and edit the file before the software can be made
          to work.</para>
      </sect1>

      <sect1>
        <title>Portlint</title>

        <para>Do check your work with <link
            linkend="porting-portlint"><command>portlint</command></link>
          before you submit or commit it.</para>
      </sect1>

      <sect1>
        <title>Feedback</title>

        <para>Do send applicable changes/patches to the original
          author/maintainer for inclusion in next release of the code.  This
          will only make your job that much easier for the next
          release.</para>
      </sect1>

      <sect1>
        <title><filename>README.html</filename></title>

        <para>Do not include the <filename>README.html</filename> file.  This
          file is not part of the cvs collection but is generated using the
          <command>make readme</command> command.
        </para>
      </sect1>

      <sect1>
        <title>Miscellanea</title>

        <para>The files <filename>pkg-comment</filename>,
          <filename>pkg-descr</filename>, and <filename>pkg-plist</filename>
          should each be double-checked.  If you are reviewing a port and feel
          they can be worded better, do so.</para>

        <para>Do not copy more copies of the GNU General Public License into
          our system, please.</para>

        <para>Please be careful to note any legal issues! Do not let us
          illegally distribute software!</para>
      </sect1>

      <sect1>
        <title>If you are stuck&hellip;</title>

        <para>Do look at existing examples and the
          <filename>bsd.port.mk</filename> file before asking us questions!
          <!-- smiley --><emphasis>;-)</emphasis></para>

        <para>Do ask us questions if you have any trouble! Do not just beat
          your head against a wall! <!-- smiley
          --><emphasis>:-)</emphasis></para>
      </sect1>
    </chapter>

    <chapter id="porting-samplem">
      <title>A Sample <filename>Makefile</filename></title>

      <para>Here is a sample <filename>Makefile</filename> that you can use to
        create a new port.  Certifique-se you remove all the extra comments (ones
        between brackets)!</para>

      <para>It is recommended that you follow this format (ordering of
        variables, empty lines between sections, etc.).  This format is
        designed so that the most important information is easy to locate.  We
        recommend that you use <link
          linkend="porting-portlint">portlint</link> to check the
        <filename>Makefile</filename>.</para>

      <programlisting>[the header...just to make it easier for us to identify the ports.]
# New ports collection makefile for:   xdvi
[the "version required" line is only needed when the PORTVERSION
 variable is not specific enough to describe the port.]
# Date created:                26 May 1995
[this is the person who did the original port to FreeBSD, in particular, the
person who wrote the first version of this Makefile.  Remember, this should
not be changed when upgrading the port later.]
# Whom:                        Satoshi Asami &lt;asami@FreeBSD.org&gt;
#
# &dollar;FreeBSD&dollar;
[ ^^^^^^^^^ This will be automatically replaced with RCS ID string by CVS
when it is committed to our repository.  If upgrading a port, do not alter
this line back to "&dollar;FreeBSD&dollar;".  CVS deals with it automatically.]
#

[section to describe the port itself and the master site - PORTNAME
 and PORTVERSION are always first, followed by CATEGORIES,
 and then MASTER_SITES, which can be followed by MASTER_SITE_SUBDIR.
 PKGNAMEPREFIX and PKGNAMESUFFIX, if needed, will be after that.
 Then comes DISTNAME, EXTRACT_SUFX and/or DISTFILES, and then
 EXTRACT_ONLY, as necessary.]
PORTNAME=      xdvi
PORTVERSION=   18.2
CATEGORIES=    print
[do not forget the trailing slash ("/")!
 if you are not using MASTER_SITE_* macros]
MASTER_SITES=  ${MASTER_SITE_XCONTRIB}
MASTER_SITE_SUBDIR= applications
PKGNAMEPREFIX= ja-
DISTNAME=      xdvi-pl18
[set this if the source is not in the standard ".tar.gz" form]
EXTRACT_SUFX=  .tar.Z

[section for distributed patches -- can be empty]
PATCH_SITES=   ftp://ftp.sra.co.jp/pub/X11/japanese/
PATCHFILES=    xdvi-18.patch1.gz xdvi-18.patch2.gz

[maintainer; *mandatory*!  This is the person (preferably with commit
 privileges) whom a user can contact for questions and bug reports - this
 person should be the porter or someone who can forward questions to the
 original porter reasonably promptly.  If you really do not want to have
 your address here, set it to "ports@FreeBSD.org".]
MAINTAINER=    asami@FreeBSD.org

[dependencies -- can be empty]
RUN_DEPENDS=   gs:${PORTSDIR}/print/ghostscript
LIB_DEPENDS=   Xpm.5:${PORTSDIR}/graphics/xpm

[this section is for other standard bsd.port.mk variables that do not
 belong to any of the above]
[If it asks questions during configure, build, install...]
IS_INTERACTIVE=        yes
[If it extracts to a directory other than ${DISTNAME}...]
WRKSRC=                ${WRKDIR}/xdvi-new
[If the distributed patches were not made relative to ${WRKSRC}, you
 may need to tweak this]
PATCH_DIST_STRIP=      -p1
[If it requires a "configure" script generated by GNU autoconf to be run]
GNU_CONFIGURE= yes
[If it requires GNU make, not /usr/bin/make, to build...]
USE_GMAKE=     yes
[If it is an X application and requires "xmkmf -a" to be run...]
USE_IMAKE=     yes
[et cetera.]

[non-standard variables to be used in the rules below]
MY_FAVORITE_RESPONSE=  "yeah, right"

[then the special rules, in the order they are called]
pre-fetch:
        i go fetch something, yeah

post-patch:
        i need to do something after patch, great

pre-install:
        and then some more stuff before installing, wow

[and then the epilogue]
.include &lt;bsd.port.mk&gt;</programlisting>
    </chapter>

    <chapter id="porting-autoplist">
      <title>Automated package list creation</title>

      <para>First, certifique-se your port is almost complete, with only
        <filename>pkg-plist</filename> missing.  Create an empty
        <filename>pkg-plist</filename>.</para>

      <screen>&prompt.root; <userinput>touch pkg-plist</userinput></screen>

      <para>Next, create a new set of directories which your port can be
        installed, and install any dependencies.</para>

      <screen>&prompt.root; <userinput>mtree -U -f /etc/mtree/BSD.local.dist -d -e -p /var/tmp/<replaceable>port-name</replaceable></userinput>
&prompt.root; <userinput>make depends PREFIX=/var/tmp/<replaceable>port-name</replaceable></userinput></screen>

      <para>Store the directory structure in a new file.</para>

      <screen>&prompt.root; <userinput>(cd /var/tmp/<replaceable>port-name</replaceable> && find * -type d) &gt; OLD-DIRS</userinput></screen>

      <para>If your port honors <makevar>PREFIX</makevar> (which it should)
        you can then install the port and create the package list.</para>

      <screen>&prompt.root; <userinput>make install PREFIX=/var/tmp/<replaceable>port-name</replaceable></userinput>
&prompt.root; <userinput>(cd /var/tmp/<replaceable>port-name</replaceable> && find * \! -type d) &gt; pkg-plist</userinput></screen>

      <para>You must also add any newly created directories to the packing
        list.</para>

      <screen>&prompt.root; <userinput>(cd /var/tmp/<replaceable>port-name && find * -type d) | comm -13 OLD-DIRS - | sed -e 's#^#@dirrm #' &gt;&gt; pkg-plist</replaceable></userinput></screen>

      <para>Finally, you need to tidy up the packing list by hand; it isn't
        <emphasis>all</emphasis> automated.  Manual pages should be listed in
        the port's <filename>Makefile</filename> under
        <makevar>MAN<replaceable>n</replaceable></makevar>, and not in the
        package list.  User configuration files should be removed, or
        installed as
        <filename><replaceable>filename</replaceable>.sample</filename>.
        The <filename>info/dir</filename> file should not be listed
        and appropriate <filename>install-info</filename> lines should
        be added as noted in the <link linkend="porting-info">info
        files</link> section.  Any
        libraries installed by the port should be listed as specified in the
        <link linkend="porting-shlibs">shared libraries</link> section.</para>
    </chapter>

    <chapter id="porting-pkgname">
      <title>Package Names</title>

      <para>The following are the conventions you should follow in naming your
        packages.  This is to have our package directory easy to scan, as
        there are already lots and lots of packages and users are going to
        turn away if they hurt their eyes!</para>

      <para>The package name should look like
        <filename><replaceable><optional>language<optional>_region</optional></optional>-name<optional><optional>-</optional>compiled.specifics</optional>-version.numbers</replaceable></filename>.</para>

      <para>The package name is defined as
        <literal>${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PORTVERSION}</literal>.
        Certifique-se to set the variables to conform to that format.</para>

      <orderedlist>
        <listitem>
          <para>FreeBSD strives to support the native language of its users.
            The <replaceable>language-</replaceable> part should be a two
            letter abbreviation of the natural language defined by ISO-639 if
            the port is specific to a certain language.  Examples are
            <literal>ja</literal> for Japanese, <literal>ru</literal> for
            Russian, <literal>vi</literal> for Vietnamese,
            <literal>zh</literal> for Chinese, <literal>ko</literal> for
            Korean and <literal>de</literal> for German.</para>

	  <para>If the port is specific to a certain region within the
            language area, add the two letter country code as well.
            Examples are <literal>en_US</literal> for US English and
            <literal>fr_CH</literal> for Swiss French.</para>

          <para>The <replaceable>language-</replaceable> part should
            be set in the <makevar>PKGNAMEPREFIX</makevar> variable.</para>
        </listitem>

        <listitem>
          <para>The first letter of <filename>name</filename> part
            should be lowercase.  (The rest of the name can contain
            capital letters, so use your own discretion when you are
            converting a software name that has some capital letters in it.)
            There is a tradition of naming Perl 5 modules by
            prepending <literal>p5-</literal> and converting the double-colon
            separator to a hyphen; for example, the
            <literal>Data::Dumper</literal> module becomes
            <literal>p5-Data-Dumper</literal>.  If the software in question
            has numbers, hyphens, or underscores in its name, you may include
            them as well (like <literal>kinput2</literal>).</para>
        </listitem>

        <listitem>
          <para>If the port can be built with different <link
              linkend="porting-masterdir">hardcoded defaults</link> (usually
            part of the directory name in a family of ports), the
            <replaceable>-compiled.specifics</replaceable> part should state
            the compiled-in defaults (the hyphen is optional).  Examples are
            papersize and font units.</para>

          <para>The <replaceable>compiled.specifics</replaceable> part
            should be set in the <makevar>PKGNAMESUFFIX</makevar>
            variable.</para>
        </listitem>

        <listitem>
          <para>The version string should follow a dash
            (<literal>-</literal>) and be a period-separated list of
            integers and single lowercase alphabetics.  In particular,
            it is not permissible to have another dash inside the
            version string.  The only exception is the string
            <literal>pl</literal> (meaning `patchlevel'), which can be
            used <emphasis>only</emphasis> when there are no major and
            minor version numbers in the software.  If the software
            version has strings like "alpha", "beta", "rc", or "pre", take
            the first letter and put it immediately after a period.
            If the version string continues after those names, the
            numbers should follow the single alphabet without an extra
            period between them.</para>

          <para>The idea is to make it easier to sort ports by looking
            at the version string.  In particular, certifique-se version
            number components are always delimited by a period, and
            if the date is part of the string, use the
            <literal><replaceable>yyyy</replaceable>.<replaceable>mm</replaceable>.<replaceable>dd</replaceable></literal>
            format, not
            <literal><replaceable>dd</replaceable>.<replaceable>mm</replaceable>.<replaceable>yyyy</replaceable></literal>
            or the non-Y2K compliant
            <literal><replaceable>yy</replaceable>.<replaceable>mm</replaceable>.<replaceable>dd</replaceable></literal>
            format.</para>
        </listitem>
      </orderedlist>

      <para>Here are some (real) examples on how to convert the name
        as called by the software authors to a suitable package
        name:</para>

      <informaltable frame="none">
        <tgroup cols="6">
          <thead>
            <row>
              <entry>Distribution Name</entry>
              <entry><makevar>PKGNAMEPREFIX</makevar></entry>
              <entry><makevar>PORTNAME</makevar></entry>
              <entry><makevar>PKGNAMESUFFIX</makevar></entry>
              <entry><makevar>PORTVERSION</makevar></entry>
              <entry>Reason</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>mule-2.2.2</entry>
              <entry>(empty)</entry>
              <entry>mule</entry>
              <entry>(empty)</entry>
              <entry>2.2.2</entry>
              <entry>No changes required</entry>
            </row>

            <row>
              <entry>XFree86-3.3.6</entry>
              <entry>(empty)</entry>
              <entry>XFree86</entry>
              <entry>(empty)</entry>
              <entry>3.3.6</entry>
              <entry>No changes required</entry>
            </row>

            <row>
              <entry>EmiClock-1.0.2</entry>
              <entry>(empty)</entry>
              <entry>emiclock</entry>
              <entry>(empty)</entry>
              <entry>1.0.2</entry>
              <entry>No uppercase names for single programs</entry>
            </row>

            <row>
              <entry>rdist-1.3alpha</entry>
              <entry>(empty)</entry>
              <entry>rdist</entry>
              <entry>(empty)</entry>
              <entry>1.3.a</entry>
              <entry>No strings like <literal>alpha</literal>
                allowed</entry>
            </row>

            <row>
              <entry>es-0.9-beta1</entry>
              <entry>(empty)</entry>
              <entry>es</entry>
              <entry>(empty)</entry>
              <entry>0.9.b1</entry>
              <entry>No strings like <literal>beta</literal>
                allowed</entry>
            </row>

            <row>
              <entry>mailman-2.0rc3</entry>
              <entry>(empty)</entry>
              <entry>mailman</entry>
              <entry>(empty)</entry>
              <entry>2.0.r3</entry>
              <entry>No strings like <literal>rc</literal>
                allowed</entry>
            </row>

            <row>
              <entry>v3.3beta021.src</entry>
              <entry>(empty)</entry>
              <entry>tiff</entry>
              <entry>(empty)</entry>
              <entry>3.3</entry>
              <entry>What the heck was that anyway?</entry>
            </row>

            <row>
              <entry>tvtwm</entry>
              <entry>(empty)</entry>
              <entry>tvtwm</entry>
              <entry>(empty)</entry>
              <entry>pl11</entry>
              <entry>Version string always required</entry>
            </row>

            <row>
              <entry>piewm</entry>
              <entry>(empty)</entry>
              <entry>piewm</entry>
              <entry>(empty)</entry>
              <entry>1.0</entry>
              <entry>Version string always required</entry>
            </row>

            <row>
              <entry>xvgr-2.10pl1</entry>
              <entry>(empty)</entry>
              <entry>xvgr</entry>
              <entry>(empty)</entry>
              <entry>2.10.1</entry>
              <entry><literal>pl</literal> allowed only when no
                major/minor version numbers</entry>
            </row>

            <row>
              <entry>gawk-2.15.6</entry>
              <entry>ja-</entry>
              <entry>gawk</entry>
              <entry>(empty)</entry>
              <entry>2.15.6</entry>
              <entry>Japanese language version</entry>
            </row>

            <row>
              <entry>psutils-1.13</entry>
              <entry>(empty)</entry>
              <entry>psutils</entry>
              <entry>-letter</entry>
              <entry>1.13</entry>
              <entry>Papersize hardcoded at package build time</entry>
            </row>

            <row>
              <entry>pkfonts</entry>
              <entry>(empty)</entry>
              <entry>pkfonts</entry>
              <entry>300</entry>
              <entry>1.0</entry>
              <entry>Package for 300dpi fonts</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>If there is absolutely no trace of version information in the
        original source and it is unlikely that the original author will ever
        release another version, just set the version string to
        <literal>1.0</literal> (like the piewm example above).  Otherwise, ask
        the original author or use the date string
        (<literal><replaceable>yyyy</replaceable>.<replaceable>mm</replaceable>.<replaceable>dd</replaceable></literal>)
	as the version.</para>
    </chapter>

    <chapter id="porting-categories">
        <title>Categories</title>

      <para>As you already know, ports are classified in several categories.
        But for this to work, it is important that porters and users understand
        what each category is for and how we decide what to put in each
        category.</para>

      <sect1>
        <title>Current list of categories</title>

        <para>First, this is the current list of port categories.  Those
          marked with an asterisk (<literal>*</literal>) are
          <emphasis>virtual</emphasis> categories&mdash;those that do not have
          a corresponding subdirectory in the ports tree.</para>

        <note>
          <para>For non-virtual categories, you will find a one-line
            description in the <filename>pkg/COMMENT</filename> file in that
            subdirectory (e.g.,
            <filename>archivers/pkg/COMMENT</filename>).</para>
        </note>

        <informaltable frame="none">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Category</entry>
                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><filename>afterstep*</filename></entry>
                <entry>Ports to support the AfterStep window manager.</entry>
              </row>

              <row>
                <entry><filename>archivers</filename></entry>
                <entry>Archiving tools.</entry>
              </row>

              <row>
                <entry><filename>astro</filename></entry>
                <entry>Astronomical ports.</entry>
              </row>

              <row>
                <entry><filename>audio</filename></entry>
                <entry>Sound support.</entry>
              </row>

              <row>
                <entry><filename>benchmarks</filename></entry>
                <entry>Benchmarking utilities.</entry>
              </row>

              <row>
                <entry><filename>biology</filename></entry>
                <entry>Biology-related software.</entry>
              </row>

              <row>
                <entry><filename>cad</filename></entry>
                <entry>Computer aided design tools.</entry>
              </row>

              <row>
                <entry><filename>chinese</filename></entry>
                <entry>Chinese language support.</entry>
              </row>

              <row>
                <entry><filename>comms</filename></entry>
                <entry>Communication software.  Mostly software to talk to
                  your serial port.</entry>
              </row>

              <row>
                <entry><filename>converters</filename></entry>
                <entry>Character code converters.</entry>
              </row>

              <row>
                <entry><filename>databases</filename></entry>
                <entry>Databases.</entry>
              </row>

              <row>
                <entry><filename>deskutils</filename></entry>
                <entry>Things that used to be on the desktop before
                  computers were invented.</entry>
              </row>

              <row>
                <entry><filename>devel</filename></entry>
                <entry>Development utilities.  Do not put libraries here just
                  because they are libraries&mdash;unless they truly do not
                  belong anywhere else, they should not be in this
                  category.</entry>
              </row>

              <row>
                <entry><filename>editors</filename></entry>
                <entry>General editors.  Specialized editors go in the section
                  for those tools (e.g., a mathematical-formula editor will go
                  in <filename>math</filename>).</entry>
              </row>

              <row>
                <entry><filename>elisp*</filename></entry>
                <entry>Emacs-lisp ports.</entry>
              </row>

              <row>
                <entry><filename>emulators</filename></entry>
                <entry>Emulators for other operating systems.  Terminal
                  emulators do <emphasis>not</emphasis> belong
                  here&mdash;X-based ones should go to
                  <filename>x11</filename> and text-based ones to either
                  <filename>comms</filename> or <filename>misc</filename>,
                  depending on the exact functionality.</entry>
              </row>

              <row>
                <entry><filename>french</filename></entry>
                <entry>French language support.</entry>
              </row>

              <row>
                <entry><filename>ftp</filename></entry>
                <entry>FTP client and server utilities.  If your
                  port speaks both FTP and HTTP, put it in
                  <filename>ftp</filename> with a secondary
                  category of <filename>www</filename>.</entry>
              </row>

              <row>
                <entry><filename>games</filename></entry>
                <entry>Games.</entry>
              </row>

              <row>
                <entry><filename>german</filename></entry>
                <entry>German language support.</entry>
              </row>

              <row>
                <entry><filename>gnome*</filename></entry>
                <entry>Ports from the GNU Object Model Environment (GNOME)
                  Project.</entry>
              </row>

              <row>
                <entry><filename>graphics</filename></entry>
                <entry>Graphics utilities.</entry>
              </row>

              <row>
                <entry><filename>hebrew</filename></entry>
                <entry>Hebrew language support.</entry>
              </row>

              <row>
                <entry><filename>irc</filename></entry>
                <entry>Internet Relay Chat utilities.</entry>
              </row>

              <row>
                <entry><filename>ipv6*</filename></entry>
                <entry>IPv6 related software.</entry>
              </row>

              <row>
                <entry><filename>japanese</filename></entry>
                <entry>Japanese language support.</entry>
              </row>

              <row>
                <entry><filename>java</filename></entry>
                <entry>Java language support.</entry>
              </row>

              <row>
                <entry><filename>kde*</filename></entry>
                <entry>Ports from the K Desktop Environment (KDE)
                  Project.</entry>
              </row>

              <row>
                <entry><filename>korean</filename></entry>
                <entry>Korean language support.</entry>
              </row>

              <row>
                <entry><filename>lang</filename></entry>
                <entry>Programming languages.</entry>
              </row>

              <row>
                <entry><filename>linux*</filename></entry>
                <entry>Linux applications and support utilities.</entry>
              </row>

              <row>
                <entry><filename>mail</filename></entry>
                <entry>Mail software.</entry>
              </row>

              <row>
                <entry><filename>math</filename></entry>
                <entry>Numerical computation software and other utilities
                  for mathematics.</entry>
              </row>

              <row>
                <entry><filename>mbone</filename></entry>
                <entry>MBone applications.</entry>
              </row>

              <row>
                <entry><filename>misc</filename></entry>
                <entry>Miscellaneous utilities&mdash;basically things that
                  do not belong anywhere else.  This is the only category
                  that should not appear with any other non-virtual category.
                  If you have <literal>misc</literal> with something else in
                  your <makevar>CATEGORIES</makevar> line, that means you can
                  safely delete <literal>misc</literal> and just put the port
                  in that other subdirectory!</entry>
              </row>

              <row>
                <entry><filename>net</filename></entry>
                <entry>Miscellaneous networking software.</entry>
              </row>

              <row>
                <entry><filename>news</filename></entry>
                <entry>USENET news software.</entry>
              </row>

              <row>
                <entry><filename>offix*</filename></entry>
                <entry>Ports from the OffiX suite.</entry>
              </row>

              <row>
                <entry><filename>palm</filename></entry>
                <entry>Software support for the 3Com Palm(tm) series.</entry>
              </row>

              <row>
                <entry><filename>perl5*</filename></entry>
                <entry>Ports that require perl version 5 to run.</entry>
              </row>

              <row>
                <entry><filename>picobsd</filename></entry>
                <entry>Ports to support PicoBSD.</entry>
              </row>

              <row>
                <entry><filename>plan9*</filename></entry>
                <entry>Various programs from Plan9.</entry>
              </row>

              <row>
                <entry><filename>print</filename></entry>
                <entry>Printing software.  Desktop publishing tools
                  (previewers, etc.) belong here too.</entry>
              </row>

              <row>
                <entry><filename>python*</filename></entry>
                <entry>Software written in python.</entry>
              </row>

              <row>
                <entry><filename>ruby*</filename></entry>
                <entry>Software written in ruby.</entry>
              </row>

              <row>
                <entry><filename>russian</filename></entry>
                <entry>Russian language support.</entry>
              </row>

              <row>
                <entry><filename>science</filename></entry>
                <entry>Scientific ports that don't fit into other
                  categories such as <filename>astro</filename>,
                  <filename>biology</filename> and
                  <filename>math</filename>.</entry>
              </row>

              <row>
                <entry><filename>security</filename></entry>
                <entry>Security utilities.</entry>
              </row>

              <row>
                <entry><filename>shells</filename></entry>
                <entry>Command line shells.</entry>
              </row>

              <row>
                <entry><filename>sysutils</filename></entry>
                <entry>System utilities.</entry>
              </row>

              <row>
                <entry><filename>tcl76*</filename></entry>
                <entry>Ports that use Tcl version 7.6 to run.</entry>
              </row>

              <row>
                <entry><filename>tcl80*</filename></entry>
                <entry>Ports that use Tcl version 8.0 to run.</entry>
              </row>

              <row>
                <entry><filename>tcl81*</filename></entry>
                <entry>Ports that use Tcl version 8.1 to run.</entry>
              </row>

              <row>
                <entry><filename>tcl82*</filename></entry>
                <entry>Ports that use Tcl version 8.2 to run.</entry>
              </row>

              <row>
                <entry><filename>textproc</filename></entry>
                <entry>Text processing utilities.  It does not include
                  desktop publishing tools, which go to print/.</entry>
              </row>

              <row>
                <entry><filename>tk42*</filename></entry>
                <entry>Ports that use Tk version 4.2 to run.</entry>
              </row>

              <row>
                <entry><filename>tk80*</filename></entry>
                <entry>Ports that use Tk version 8.0 to run.</entry>
              </row>

              <row>
                <entry><filename>tk81*</filename></entry>
                <entry>Ports that use Tk version 8.1 to run.</entry>
              </row>

              <row>
                <entry><filename>tk82*</filename></entry>
                <entry>Ports that use Tk version 8.2 to run.</entry>
              </row>

              <row>
                <entry><filename>tkstep80*</filename></entry>
                <entry>Ports that use TkSTEP version 8.0 to run.</entry>
              </row>

              <row>
                <entry><filename>ukrainian</filename></entry>
                <entry>Ukrainian language support.</entry>
              </row>

              <row>
                <entry><filename>vietnamese</filename></entry>
                <entry>Vietnamese language support.</entry>
              </row>

              <row>
                <entry><filename>windowmaker*</filename></entry>
                <entry>Ports to support the WindowMaker window
                  manager</entry>
              </row>

              <row>
                <entry><filename>www</filename></entry>
                <entry>Software related to the World Wide Web.  HTML language
                  support belongs here too.</entry>
              </row>

              <row>
                <entry>x11</entry>
                <entry>The X window system and friends.  This category is only
                  for software that directly supports the window system.  Do not
                  put regular X applications here.  If your port is an X
                  application, define <makevar>USE_XLIB</makevar> (implied by
                  <makevar>USE_IMAKE</makevar>) and put it in the appropriate
                  categories.  Also, many of them go into other
                  <filename>x11-*</filename> categories (see below).</entry>
              </row>

              <row>
                <entry><filename>x11-clocks</filename></entry>
                <entry>X11 clocks.</entry>
              </row>

              <row>
                <entry><filename>x11-fm</filename></entry>
                <entry>X11 file managers.</entry>
              </row>

              <row>
                <entry><filename>x11-fonts</filename></entry>
                <entry>X11 fonts and font utilities.</entry>
              </row>

              <row>
                <entry><filename>x11-servers</filename></entry>
                <entry>X11 servers.</entry>
              </row>

              <row>
                <entry><filename>x11-toolkits</filename></entry>
                <entry>X11 toolkits.</entry>
              </row>

              <row>
                <entry><filename>x11-wm</filename></entry>
                <entry>X11 window managers.</entry>
              </row>

              <row>
                <entry><filename>zope*</filename></entry>
                <entry>Zope support.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect1>

      <sect1>
        <title>Choosing the right category</title>

        <para>As many of the categories overlap, you often have to choose
          which of the categories should be the primary category of your port.
          There are several rules that govern this issue.  Here is the list of
          priorities, in decreasing order of precedence.</para>

        <itemizedlist>
          <listitem>
            <para>Language specific categories always come first.  For
              example, if your port installs Japanese X11 fonts, then your
              <makevar>CATEGORIES</makevar> line would read <literal>japanese
                x11-fonts</literal>.</para>
          </listitem>

          <listitem>
            <para>Specific categories win over less-specific ones.  For
              instance, an HTML editor should be listed as <literal>www
                editors</literal>, not the other way around.  Also, you do not
              need to list <literal>net</literal> when the port belongs to
              any of <literal>irc</literal>, <literal>mail</literal>,
              <literal>mbone</literal>, <literal>news</literal>,
              <literal>security</literal>, or <literal>www</literal>.</para>
          </listitem>

          <listitem>
            <para><literal>x11</literal> is used as a secondary category only
              when the primary category is a natural language.  In particular,
              you should not put <literal>x11</literal> in the category line
              for X applications.</para>
          </listitem>

          <listitem>
            <para><application>Emacs</application> modes should be
	      placed in the same ports category as the application
	      supported by the mode, not in
	      <filename>editors</filename>.  For example, an
	      <application>Emacs</application> mode to edit source
	      files of some programming language should go into
	      <filename>lang</filename>.
              </para>
          </listitem>

          <listitem>
            <para>If your port truly does not belong anywhere else, put it in
              <literal>misc</literal>.</para>
          </listitem>
        </itemizedlist>

        <para>If you are not sure about the category, please put a comment to
          that effect in your <command>send-pr</command> submission so we can
          discuss it before we import it.  If you are a committer, send a note
          to the &a.ports; so we can discuss it first&mdash;too often new ports are
          imported to the wrong category only to be moved right away.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Changes to this document and the ports system</title>

      <para>If you maintain a lot of ports, you should consider following the
        &a.ports;.  Important changes to the way ports work will be announced
        there.  You can always find more detailed information on the latest
        changes by looking at <ulink
          url="http://www.FreeBSD.org/cgi/cvsweb.cgi/ports/Mk/bsd.port.mk"> the
          bsd.port.mk CVS log</ulink>.</para>
    </chapter>

    <chapter>
      <title>That is It, Folks!</title>

      <para>Boy, this sure was a long tutorial, wasn't it?  Thanks for
        following us to here, really.  Now that you know how to do a port,
        have at it and convert everything in the world into ports! That
        is the easiest way to start contributing to the FreeBSD Project!
        <!-- smiley --><emphasis>:-)</emphasis></para>
    </chapter>
</book>

<!--
     Local Variables:
     mode: sgml
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     End:
-->

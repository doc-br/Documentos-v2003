<!-- Copyright (c) 1998, 1999 Nik Clayton, All rights reserved.

     Redistribution and use in source (SGML DocBook) and 'compiled' forms
     (SGML, HTML, PDF, PostScript, RTF and so forth) with or without
     modification, are permitted provided that the following conditions
     are met:

      1. Redistributions of source code (SGML DocBook) must retain the above
         copyright notice, this list of conditions and the following
         disclaimer as the first lines of this file unmodified.

      2. Redistributions in compiled form (transformed to other DTDs,
         converted to PDF, PostScript, RTF and other formats) must reproduce
         the above copyright notice, this list of conditions and the
         following disclaimer in the documentation and/or other materials
         provided with the distribution.

     THIS DOCUMENTATION IS PROVIDED BY NIK CLAYTON "AS IS" AND ANY EXPRESS OR
     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     DISCLAIMED. IN NO EVENT SHALL NIK CLAYTON BE LIABLE FOR ANY DIRECT,
     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
     ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.

     $FreeBSD: doc/en_US.ISO8859-1/books/fdp-primer/sgml-primer/chapter.sgml,v 1.36 2003/07/20 20:55:18 blackend Exp $
-->

<chapter id="sgml-primer">
  <title>SGML Primer</title>

  <para>A maioria dos documentos do FDP &eacute; escrita utilizando SGML.
    Este cap&iacute;tulo ir&aacute; explicar exatamente o que isso significa, como ler
    e compreender os fontes dos documentos e os truques de SGML que
    voc&ecirc; ir&aacute; se defrontar na documenta&ccedil;&atilde;o.</para>
  
  <para>Partes desta sess&atilde;o foram inspiradas no documento <ulink
    url="http://nis-www.lanl.gov/~rosalia/mydocs/docbook-intro/docbook-intro.html">
    Come&ccedil;ando a utilizar o DocBook</ulink> de autoria do Mark Galassi.</para>
  
  <sect1 id="sgml-primer-overview">
    <title>Vis&atilde;o Geral</title>

    <para>Antigamente, era simples de se lidar com um texto
      eletr&ocirc;nico.  Naquela &eacute;poca, voc&ecirc; tinha que saber em qual
      conjunto de caracteres o seu documento seria escrito (ASCII,
      EBCDICm ou um dos inumeros outros), e mais nada.  O texto era o
      texto, e o que voc&ecirc; via era realmente o que voc&ecirc; tinha come&ccedil;ado.
      Nenhum <literal>frills</literal>, nenhuma formata&ccedil;&atilde;o, nenhuma
      intelig&ecirc;ncia.</para>
    
    <para>Inevit&aacute;velmente, isto n&atilde;o era o suficiente.  Uma vez que
      voc&ecirc; tem o texto em uma m&aacute;quina num formato utiliz&aacute;vel, voc&ecirc;
      espera que o equipamento seja capaz de us&aacute;-lo e manipul&aacute;-lo de
      forma inteligente.  Voc&ecirc; pode desejar indicar que uma determinada
      frase deve ser enfatizada, ou adicionada a um gloss&aacute;rio, ou ser
      interligada a outra parte do documento.  Voc&ecirc; pode querer que os
      nomes dos arquivos sejam exibidos com uma fonte de estilo
      <quote>typewriter</quote> quando forem exibidos na tela, mas
      como <quote>it&aacute;lico</quote> quando impresso, ou qualquer outra
      mir&iacute;ade de outras op&ccedil;&otilde;es para apresenta&ccedil;&atilde;o.</para>
    
    <para>Esperava-se que a intelig&ecirc;ncia artificial (AI) torna-se isso
      f&aacute;cil.  O seu computador leria o documento e identificaria 
      automaticamente as frases chave, nomes de arquivos, os campos 
      que o leitor teria que preencher, e muito mais.  Infelizmente, 
      a vida real n&atilde;o evoluiu como esperado, e os nossos computadores
      necessitam de algum auxilio antes que eles possam processar
      significativamente nosso texto.</para>

    <para>Mais precisamente, eles precisam de ajuda para identificar
      o que &eacute; o que.  Voc&ecirc; ou eu podem olhar para
    
      <blockquote>
	<para>Para remover o <filename>/tmp/foo</filename> utilize &man.rm.1;.</para>

	<screen>&prompt.user; <userinput>rm /tmp/foo</userinput></screen>
      </blockquote>

      E facilmente visualizar quais partes s&atilde;o nomes de arquivos,
      quais s&atilde;o comandos que devem ser digitados, quais partes s&atilde;o
      refer&ecirc;ncias &agrave; p&aacute;ginas de manual, etc.  Mas o computador
      processando o documento n&atilde;o pode.  Para isto n&oacute;s precisamos
      utilizar uma marca&ccedil;&atilde;o (<literal>markup</literal>).</para>

    <para>A <quote>marca&ccedil;&atilde;o</quote> &eacute; comumente utilizada para
      descrever a <quote>adi&ccedil;&atilde;o de valor</quote> ou <quote>aumento de
      custo</quote>.  O termo (term) faz exame de ambos os meios
      quando aplicados ao texto.  A marca&ccedil;&atilde;o &eacute; um texto adicional
      incluido no documento, e de alguma forma destacado do conte&uacute;do 
      do documento, de modo que os programas que forem processar os
      poder&atilde;o ler as marca&ccedil;&otilde;es e utiliz&aacute;-las aos tomar decis&otilde;es sobre
      o documento.  Os editores podem ocultar a marca&ccedil;&atilde;o do usu&aacute;rio,
      de forma que o usu&aacute;rio n&atilde;o se distraia com ele.</para>
    
    <para>As informa&ccedil;&otilde;es extras armazenadas na marca&ccedil;&atilde;o
      <emphasis>adicionam valor</emphasis> ao documento.  Tipicamente a 
      adi&ccedil;&atilde;o da marca&ccedil;&atilde;o ao documento precisa ser realizada por uma
      pessoa &mdash; apesar de tudo, se os computadores pudessem
      reconhecer suficientemente bem o texto para adicionar as
      marca&ccedil;&otilde;es, ent&atilde;o n&atilde;o haveria necessidade de adicion&aacute;-las em
      primeiro lugar.  Isto <emphasis>aumenta o custo</emphasis> (isto
      &eacute;, o esfor&ccedil;o requerido) para criar o documento.</para>
    
    <para>O exemplo precedente &eacute; representado realmente neste
      documento como se segue:</para>
    
    <programlisting><![ CDATA [
<para>To remove <filename>/tmp/foo</filename> use &man.rm.1;.</para>

<screen>&prompt.user; <userinput>rm /tmp/foo</userinput></screen>]]></programlisting>

    <para>Como voc&ecirc; pode ver, a marca&ccedil;&atilde;o est&aacute; claramente separada do
      conte&uacute;do.</para>
    
    <para>Obviamente, se voc&ecirc; estiver iniciando no uso de marca&ccedil;&otilde;es,
      voc&ecirc; precisa definir o que a sua marca&ccedil;&atilde;o significa, e como ela
      ser&aacute; interpretada.  Voc&ecirc; vai precisar de uma linguagem de
      marca&ccedil;&atilde;o a qual voc&ecirc; possa seguir quando estiver marcando os
      seus documentos.</para>
    
    <para>Naturalmente, uma linguagem de marca&ccedil;&atilde;o pode n&atilde;o ser o
      bastante.  Os requisitos de uma linguagem de marca&ccedil;&atilde;o destinada
      formata&ccedil;&atilde;o de documentos t&eacute;cnicos s&atilde;o diferentes dos requisitos
      de uma linguagemd e marca&ccedil;&atilde;o destinada a formata&ccedil;&atilde;o de receitas
      culin&aacute;rias.  Esta, por sua vez, seria muito diferente de uma
      linguagemd e marca&ccedil;&atilde;o usada para formatar poemas.  O que voc&ecirc;
      realmente precisa &eacute; de uma linguagem prim&aacute;ria, a qual voc&ecirc; possa
      utilizar para escrever estas e outras linguagens de marca&ccedil;&atilde;o.
      Uma <emphasis>meta linguagem de marca&ccedil;&atilde;o</emphasis>.</para>
   
    <para>&Eacute; exatamente isso que a <foreignphrase>Standard Generalized 
      Markup Language</foreignphrase> (SGML) &eacute;.  Muitas linguagens de
      marca&ccedil;&atilde;o foram escritas em SGML, incluindo as duas mais
      utilizadas pelo FDP, o HTML e o DocBook.</para>
      
    <para>Cada defini&ccedil;&atilde;o de linguagem &eacute; mais corretamente chamada de
      Defini&ccedil;&atilde;o de tipo de Documento (DTD).  O DTD especifica o nome
      dos elementos que podem ser utilizados, qual ordem eles aparecem
      (e se alguma marca&ccedil;&atilde;o pode ser utilizada dentro de outra
      marca&ccedil;&atilde;o) e as informa&ccedil;&otilde;es relacionadas.  Um DTD &eacute; algumas
      vezes referenciado como uma <emphasis>aplica&ccedil;&atilde;o</emphasis> do
      SGML.</para>
    
    <para id="sgml-primer-validating">Um DTD &eacute; uma especifica&ccedil;&atilde;o
      <emphasis>completa</emphasis> de todos os elementos que podem
      ser utilizados, a ordem em que podem aparecer, quais elementos 
      s&atilde;o obrigat&oacute;rios, quais s&atilde;o opcionais, e assim por diante.  Isto
      torna poss&iacute;vel escrever um interpretador (parser) SGML, que leia 
      ambos os DTD e um documento que reinvidique se adequar ao DTD.
      O interpretador pode ent&atilde;o confirmar se todos os elementos
      obrigat&oacute;rios do DTD est&atilde;o (ou n&atilde;o) presentes no documento na ordem
      correta, e se existem erros na marca&ccedil;&atilde;o.  Isto &eacute; normalmente
      referenciado como <quote>valida&ccedil;&atilde;o do documento</quote>.</para>
    
    <note>
      <para>Este processamento simplesmente confirma se a escolha dos
      	elementos, a sua ordena&ccedil;&atilde;o, etc, est&atilde;o de acordo com o listado
	no DTD.   Ele <emphasis>n&atilde;o</emphasis> verifica se voc&ecirc;
	utilizou a marca&ccedil;&atilde;o <emphasis>adequada</emphasis> para conte&uacute;do.  
	Se voc&ecirc;  tentasse marcar todos os nomes de arquivo em seu
	documento como nomes de fun&ccedil;&otilde;es, o interpretador n&atilde;o iria
	apontar isto como um erro (assumindo, naturalmente, que a sua
	DTD define elementos para nomes de arquivos e para fun&ccedil;&otilde;es, e
	que eles podem ser utilizados nos mesmos lugares).</para>
    </note>
    
    <para>&Eacute; prov&aacute;vel que a maioria das suas contribui&ccedil;&otilde;es ao projeto
      de documenta&ccedil;&atilde;o ir&atilde;o se constituir de conte&uacute;dos marcados tanto
      em HTML quanto em DocBook, o que &eacute; melhor que altera&ccedil;&otilde;es nos DTDs.  
      Por esta raz&atilde;o este livro n&atilde;o ir&aacute; abordar a cria&ccedil;&atilde;o de um
      DTD.</para>
  </sect1>
  
  <sect1 id="sgml-primer-elements">
    <title>Elementos, tags, e atributos</title>

    <para>Todos os DTDs escritos em SGML compartilham certas
      caracter&iacute;sticas.  Isto &eacute; uma dura surpresa, porque a filosofia
      por de tr&aacute;s do SGML se mostrar&aacute; completamente inevit&aacute;vel.  Uma
      das manifesta&ccedil;&otilde;es mais &oacute;bvias desta filosofia est&aacute; no <emphasis>
      conte&uacute;do</emphasis> e nos <emphasis>elementos</emphasis>.</para>
    
    <para>A sua documenta&ccedil;&atilde;o (independente se &eacute; uma un&iacute;ca p&aacute;gina web
      ou um livro longo) &eacute; composta de conte&uacute;do.  Este conte&uacute;do &eacute; ent&atilde;o
      dividido (e de novo subdividido) em elementos.  O prop&oacute;sito da
      adi&ccedil;&atilde;o de marca&ccedil;&otilde;es &eacute; atribuir nome e identidade para os limites destes
      elementos de forma a possibilitar o processamento adicional.</para>
    
    <para>Por exemplo, considere um livro t&iacute;pico.  No n&iacute;vel mais alto,
      o livro por si s&oacute; &eacute; um elemento.  Este elemento <quote>livro
      </quote> (book) obviamente cont&eacute;m cap&iacute;tulos, os quais tamb&eacute;m podem 
      ser considerados elementos em sua pr&oacute;pria forma.  Cada cap&iacute;tulo
      ir&aacute; conter mais elementos, tais como par&aacute;grafos, cita&ccedil;&otilde;es, notas
      de rodap&eacute;, etc.  Cada par&aacute;grafo pode conter elementos
      adicionais, identificando o conte&uacute;do que era de discurso direto,
      ou o nome de um personagem da hist&oacute;ria.</para>

    <para>Voc&ecirc; pode preferir pensar nisto como uma
      <quote>quebra</quote> do conte&uacute;do.  No n&iacute;vel mais alto voc&ecirc; tem
      um peda&ccedil;o, o Livro.  Olhando um pouco mais abaixo, voc&ecirc; tem mais
      peda&ccedil;os, os cap&iacute;tulos individuais.  Estes est&atilde;o divididos em
      peda&ccedil;os ainda enores, os par&aacute;grafos, notas de rodap&eacute;, nomes de
      personagens, etc.</para>

    <para>Observe que voc&ecirc; pode fazer esta diferencia&ccedil;&atilde;o entre os
      diferentes elementos do conte&uacute;do sem recorrer a nenhum termo
      SGML. <literal>It really is surprisingly straightforward.<literal>  
      Voc&ecirc; pode fazer isso utilizando uma caneta de marca&ccedil;&atilde;o e uma
      c&oacute;pia impressa do livro, utilizando diferentes cores para
      indicar os diferentes peda&ccedil;os do conte&uacute;do.</para>

    <para>Naturalmente, n&oacute;s n&atilde;o possuimos uma caneta eletronica de
      marca&ccedil;&atilde;o, assim n&oacute;s necessitamos de alguma outra maneira de
      indicar a que elemento cada pe&ccedil;a de conte&uacute;do pertence.  Nas
      linguagens escritas em SGML (HTML, DocBook, etc) isto &eacute; feito
      atrav&eacute;s do uso de <emphasis>tags</emphasis>.</para>
    
    <para>Uma tag &eacute; utilizada para identificar onde um elemento
      particular come&ccedil;a e onde ele termina.  <emphasis>A tag n&atilde;o &eacute; uma
      parte pr&oacute;pria do elemento</emphasis>.  Porque cada DTD foi
      normalmente escrito para marcar um tipo espec&iacute;fico de
      informa&ccedil;&atilde;o, cada um deles reconhecer&aacute; diferentes elementos, e
      ter&aacute; nomes diferentes para cada tag.</para>

    <para>Para um elemento chamado <replaceable>element-name</replaceable> 
      a tag de in&iacute;cio normalmente ir&aacute; se paracer com 
      <literal>&lt;<replaceable>element-name</replaceable>&gt;</literal>.  
      E a tag correspondente de fechamento para este elemento seria
      <literal>&lt;/<replaceable>element-name</replaceable>&gt;</literal>.</para>

    <example>
      <title>Utilizando um elemento (tags de inicio e fim)</title>

      <para>O HTML possui um elemento para indicar que o conte&uacute;do
	envolvido por este elemento &eacute; um paragr&aacute;fo, chamado
	<literal>p</literal>.  Este elemento possui ambas as tags de
	in&iacute;cio e de fim.</para>
      
      <programlisting><![ CDATA [<p>Este &eacute; um paragrafo.  Ele inicia com a tag de inicio
  do elemento 'p', e ir&aacute; terminar com a tag de fim para o elemento
  'p'.</p>

<p>Este &eacute; um outro paragrafo.  Mas este &eacute; muito menor.</p>]]></programlisting>	  
    </example>

    <para>Nem todos os elementos requerem uma tag de finaliza&ccedil;&atilde;o.
      Alguns elementos n&atilde;o possuem conte&uacute;do.  Por exemplo, em HTML
      voc&ecirc; pode indicar que deseja que uma linha horizontal apare&ccedil;a no
      documento.  Obviamente, esta linha n&atilde;o possui conte&uacute;do, assim
      apenas a tag de inicio &eacute; requerida para este elemento.</para>
    
    <example>
      <title>Utilizando um elemento (Apenas tag de in&iacute;cio)</title>

      <para>O HTML possui um elemnto para indicar uma linha
	horizontal, chamado <literal>hr</literal>.  Este elemento n&atilde;o
	cont&eacute;m nenhum conte&uacute;do, assim ele possui apenas uma tag de
	inicio.</para>
      
      <programlisting><![ CDATA [<p>Este &eacute; um paragr&aacute;fo.</p>

<hr>

<p>Este &eacute; outro paragrafo.  Uma linha horizontal o separa 
  do paragrafo pr&eacute;vio.</p>]]></programlisting>
    </example>
    
    <para>Se isto n&atilde;o &eacute; &oacute;bvio agora, os elementos podem conter outros
      elementos.  No exemplo anterior do livro, o elemento livro
      continha todos os elementos c&aacute;pitulos, os quais por sua vez
      continham todos os elementos paragrafos, etc</para>
    
    <example>
      <title>Elementos contendo elementos; <sgmltag>em</sgmltag></title>
      
      <programlisting><![ CDATA [<p>Este &eacute; um <em>paragrafo</em> simples no qual algumas 
  das <em>palavras</em> foram <em>enfatizadas</em>.</p>]]></programlisting>
    </example>
    
    <para>O DTD ir&aacute; especificar as regras detalhando quais elementos
      podem conter outros elementos, e o que exatamente eles podem 
      conter.</para>
    
    <important>
      <para>As pessoas sempre confundem os termos tags e elementos, e
      utilizam os termos como se eles fossem intercambi&aacute;veis.  Eles
      n&atilde;o s&atilde;o.</para>
      
      <para>Um elemento &eacute; uma parte conceitual do seu documento.  Um
      elemento possui um inicio e fim determinados.  As tags marcam
      onde os elementos come&ccedil;am e terminam.</para>
      
      <para>Quando este documento (ou qualquer pessoal que conhe&ccedil;a
      	SGML) se refere a <quote>tag &lt;p&gt;</quote> estamos nos 
	referindo literalente ao texto de tr&ecirc;s caracteres
	<literal>&lt;</literal>, <literal>p</literal> e
	<literal>&gt;</literal>.  Mas a frase <quote>o elemento
	&lt;p&gt;</quote> se refere ao elemento inteiro.</para>
      
      <para>Esta distin&ccedil;&atilde;o <emphasis>&eacute;</emphasis> muito sutil.  Mas 
	mantenha ela em mente</para>
    </important>
      
    <para>Os elementos podem ter atributos.  Um atributo possui um
      nome e um valor, e &eacute; utilizado para adicionar informa&ccedil;&otilde;es extras
      ao elemento.  Esta pode ser a informa&ccedil;&atilde;o a qual indica como o
      conte&uacute;do deve ser renderizado, ou pode ser algo que identifique
      a ocorr&ecirc;ncia &uacute;nica do elemento, ou pode ser qualquer outra
      coisa.</para>
    
    <para>O atributo de um elemento &eacute; sempre escrito
      <emphasis>dentro</emphasis> da tag de in&iacute;cio para aquele elemento,
      e assume a forma
      <literal><replaceable>nome-do-atributo</replaceable>="<replaceable>valor-do-atributo</replaceable>"</literal>.</para>

    <para>Nas vers&otilde;es suficientemente recentes do HTML, o elemento 
      <sgmltag>p</sgmltag> possui um atributo chamado <literal>align</literal>,
      o qual sugere o alinhamento (Justifica&ccedil;&atilde;o) de um paragrafo para
      o programa que estiver exibindo o HTML.</para>

    <para>O atributo <literal>align</literal> pode assumir um de
      quatro valores poss&iacute;veis, <literal>left</literal> (equerda), 
      <literal>center</literal> (centralizado), <literal>right</literal> 
      (direita) e <literal>justify</literal> (justificado).  Se o
      atributo n&atilde;o for especificado ser&aacute; assumido o valor padr&atilde;o 
      <literal>left</literal>.</para>

    <example>
      <title>Utilizando um elemento com um atributo</title>
      
      <programlisting><![ CDATA [<p align="left">A inclus&atilde;o de um atributo de alinhamento
  neste paragrafo foi sup&eacute;rfulo, uma vez que o alinhamento padr&atilde;o &eacute; left (esquerda).</p>

<p align="center">Isto pode aparacer no centro.</p>]]></programlisting>
    </example>
    
    <para>Alguns atributos ir&atilde;o assumir apenas valores espec&iacute;ficos,
      como o <literal>left</literal> ou <literal>justify</literal>.
      Outros ir&atilde;o permitir que voc&ecirc; entre com qualquer coisa que
      deseje.  Se voc&ecirc; precisar incluir aspas (<literal>"</literal>)
      no valor de um atributo, voc&ecirc; deve envolver o valor do atributo
      com aspas simples (<literal>'</literal>).</para>
      
    <example>
      <title>Aspas simples envolta de atributos</title>
      
      <programlisting><![ CDATA [<p align='right'>Eu estou a direita!</p>]]></programlisting>
    </example>

    <para>Algumas vezes voc&ecirc; n&atilde;o precisa utilizar aspas envolta de
      todos os valores dos atributos.  Entretando, a regra para fazer
      isso &eacute; muito sutil, e &eacute; muito mais simples <emphasis>sempre</emphasis>
      utilizar as aspas em volta dos valores dos seus
      atributos.</para>
    
    <para>A informa&ccedil;&atilde;o nos atributos, elementos e tags s&atilde;o armazenadas
      nos catalogos SGML.  V&aacute;rias ferramentas do projeto de
      documenta&ccedil;&atilde;o utilizam estes arquivos de catalogo para validarem
      o seu trabalho.  As ferramentas no <filename role="package">
      textproc/docproj</filename> incluem uma variedade de arquivos de
      catalogo SGML.  O projeto de documenta&ccedil;&atilde;o do FreeBSD inclui seu
      pr&oacute;prio conjunto de arquivos de catalogos.  Suas ferramentas
      precisam reconhecer ambos os tipos de arquivos de
      catalogo.</para>
      
    <sect2>
      <title>Para voc&ecirc; fazer&hellip;</title>

      <para>Para poder praticar com os exemplos detes documento voc&ecirc;
	precisar&aacute; instalar alguns aplicativos no seu sistema, al&eacute;m de
	assegurar que as vari&aacute;veis de ambiente estejam corretamente
	configuradas.</para>
      
      <procedure>
	<step>
	  <para>Fa&ccedil;a o download e instale o <filename role="package">textproc/docproj</filename>
	    a partir do sistema de ports do FreeBSD.  Ele &eacute; um 
            <emphasis>meta-port</emphasis> o qual deve efetuar o
	    download e a instala&ccedil;&atilde;o de todos os aplicativos e arquivos
	    de suporte que s&atilde;o utilizados pelo projeto de
	    documenta&ccedil;&atilde;o.</para>
	</step>
	
        <step>
          <para>Adicione linhas ao seu arquivo de inicializa&ccedil;&atilde;o do
	    shell para configurar a v&aacute;riav&eacute;l de ambiente 
            <envar>SGML_CATALOG_FILES</envar>. (Se voc&ecirc; n&atilde;o estiver
	    trabalhando com a vers&atilde;o no idioma ingl&ecirc;s da documenta&ccedil;&atilde;o,
	    voc&ecirc; pode precisar substituir o diret&oacute;rio correto para o
	    seu idioma.)</para>
	    
	  <example id="sgml-primer-envars">
	    <title><filename>.profile</filename>, para os usu&aacute;rios dos
	    shells do &man.sh.1; e do &man.bash.1;</title>
	    
	    <programlisting>SGML_ROOT=/usr/local/share/sgml	    
SGML_CATALOG_FILES=${SGML_ROOT}/jade/catalog
SGML_CATALOG_FILES=${SGML_ROOT}/iso8879/catalog:$SGML_CATALOG_FILES
SGML_CATALOG_FILES=${SGML_ROOT}/html/catalog:$SGML_CATALOG_FILES
SGML_CATALOG_FILES=${SGML_ROOT}/docbook/4.1/catalog:$SGML_CATALOG_FILES
SGML_CATALOG_FILES=/usr/doc/share/sgml/catalog:$SGML_CATALOG_FILES
SGML_CATALOG_FILES=/usr/doc/en_US.ISO8859-1/share/sgml/catalog:$SGML_CATALOG_FILES
export SGML_CATALOG_FILES</programlisting>
	  </example>

	  <example>
	    <title><filename>.cshrc</filename>, para os usu&aacute;rios do
	      shell &man.csh.1; e do &man.tcsh.1;</title>
	    
	    <programlisting>setenv SGML_ROOT /usr/local/share/sgml
setenv SGML_CATALOG_FILES ${SGML_ROOT}/jade/catalog
setenv SGML_CATALOG_FILES ${SGML_ROOT}/iso8879/catalog:$SGML_CATALOG_FILES
setenv SGML_CATALOG_FILES ${SGML_ROOT}/html/catalog:$SGML_CATALOG_FILES
setenv SGML_CATALOG_FILES ${SGML_ROOT}/docbook/4.1/catalog:$SGML_CATALOG_FILES
setenv SGML_CATALOG_FILES /usr/doc/share/sgml/catalog:$SGML_CATALOG_FILES
setenv SGML_CATALOG_FILES /usr/doc/en_US.ISO8859-1/share/sgml/catalog:$SGML_CATALOG_FILES</programlisting>
          </example>
    
          <para>Para carregar estas vari&aacute;veis, execute um logout do sistema, 
	    logando novamente em seguida, ou execute os comandos acima
	    na sua linha de comando para configurar os valores das
	    vari&aacute;veis.</para>
	</step>
      </procedure>
    
      <procedure>
	<step>
	  <para>Crie o arquivo <filename>example.sgml</filename>, e entre com o seguinte texto:</para>

	  <programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
  <head>	     
    <title>Um exemplo de arquivo HTML</title>
  </head>

  <body>	    
    <p>Este &eacute; um paragrafo contendo algum texto.</p>

    <p>Este paragrafo cont&eacute;m mais algum texto.</p>

    <p align="right">Este paragrafo pode estar alinhado a direita.</p>
  </body>	    
</html>]]></programlisting>
	</step>

	<step>
	  <para>Tente validar este arquivo utilizando um interpretador
	  SGML.</para>

	  <para>Um dos componentes do <filename role="package">textproc/docproj
	    </filename> &eacute; o &man.nsgmls.1;, um <link 
	    linkend="sgml-primer-validating">interpretador de valida&ccedil;&atilde;o</link>.
	    Normalmente, o &man.nsgmls.1; l&ecirc; um documento marcado de
	    acordo com um DTD SGML e retorna uma c&oacute;pia do conjunto de
	    informa&ccedil;&otilde;es sobre a estrutura dos elementos (ESIS, mas
	    isso n&atilde;o &eacute; importante agora).</para>
	    
	  <para>Entretanto, quando o &man.nsgmls.1; &eacute; executado com o
	    param&ecirc;tro <option>-s</option>, ele ir&aacute; suprimir o output
	    normal, e imprimir apenas as mensagens de erro.  Isto o
	    torna um meio &uacute;til de verificar se o seu documento &eacute;
	    v&aacute;lido ou n&atilde;o.</para>
	  
	  <para>Utilize o &man.nsgmls.1; para verificar se o seu documento i
	    &eacute; v&aacute;lido:</para>

          <screen>&prompt.user; <userinput>nsgmls -s example.sgml</userinput></screen>

	  <para>Como voc&ecirc; ir&aacute; ver, o &man.nsgmls.1; ir&aacute; executar sem
	    retornar nenhuma mensagem.  Isto significa que o seu
	    documento foi validado com sucesso.</para>
	</step>

	<step>
	  <para>Veja o que acontece quando um elemento obrigat&oacute;rio &eacute;
	    omitido.  Tente remover as tags <sgmltag>title</sgmltag> e 
	    <sgmltag>/title</sgmltag>, e execute novamente a 
	    valida&ccedil;&atilde;o.</para>

          <screen>&prompt.user; <userinput>nsgmls -s example.sgml</userinput>
nsgmls:example.sgml:5:4:E: character data is not allowed here
nsgmls:example.sgml:6:8:E: end tag for "HEAD" which is not finished</screen>

	  <para>As mensagens de erro emitidas pelo &man.nsgmls.1; 
	    s&atilde;o organizadas em grupos separados por dois pontos, ou
	    colunas.</para>
	  
	  <informaltable frame="none">
	    <tgroup cols="2">
	      <thead>
		<row>
		  <entry>Coluna</entry>
		  <entry>Prop&oacute;sito</entry>
		</row>
	      </thead>
	      
	      <tbody>
		<row>
		  <entry>1</entry>
		  <entry>O nome do programa que est&aacute; gerando o erro.  
		    Ela ser&aacute; sempre <literal>nsgmls</literal>.</entry>
		</row>

		<row>
		  <entry>2</entry>
		  <entry>O nome do arquivo que cont&eacute;m o erro.</entry>
		</row>

		<row>
		  <entry>3</entry>
		  <entry>N&uacute;mero da linha na qual o erro aparece.</entry>
		</row>

		<row>
		  <entry>4</entry>
		  <entry>N&uacute;mero da coluna na qual o erro aparece.</entry>
		</row>

		<row>
		  <entry>5</entry>
		  <entry>Um c&oacute;digo de uma letra indicando a natureza
		    da mensagem.  <literal>I</literal> indica uma mensagem 
		    informativa, <literal>W</literal> &eacute; para um aviso, e
		    <literal>E</literal> &eacute; para um erro
		    <footnote>
		      <para> Ele n&atilde;o est&aacute; sempre na quinta coluna.  O
			<command>nsgmls -sv</command> exibe
			<literal>nsgmls:I: SP version "1.3"</literal>
			(depende da vers&atilde;o instalada).  Como voc&ecirc; pode ver,
			esta &eacute; uma mensagem informativa.</para>
		    </footnote>, e <literal>X</literal> &eacute; para uma
		    refer&ecirc;ncia cruzada.  Como voce pode ver, estas mensagens
		    s&atilde;o erros.</entry>
		</row>

		<row>
		  <entry>6</entry>
		  <entry>O texto da mensagem de erro.</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>A simples omiss&atilde;o das tags <sgmltag>title</sgmltag> 
	    gerou 2 erros diferentes.</para>

	  <para>O primeiro erro indica que o conteudo (neste caso,
	    caracteres, ou melhor a tag de inicio de um elemento)
	    ocorreu onde o interpretador SGML estava esperando outra
	    coisa.  Neste caso, o interpretador estava esperando
	    encontrar uma das tags de in&iacute;cio para os elementos que s&atilde;o
	    v&aacute;lidos dentro do <sgmltag>head</sgmltag> (como a
	    <sgmltag>title</sgmltag>).</para>

	  <para>O segundo erro &eacute; porque o elemento <sgmltag>head</sgmltag>
	    <emphasis>deve</emphasis> conter o elemento <sgmltag>title
	    </sgmltag>.  Por causa disso o &man.nsgmls.1; considera
	    que o elemento n&atilde;o foi corretamente finalizado.
	    Entretanto, a tag de finaliza&ccedil;&atilde;o indica que o elemento foi
	    fechado antes que estivesse terminado.</para>
	</step>

	<step>
	  <para>Coloque de volta o elemento <literal>title</literal>.</para>
	</step>
      </procedure>
    </sect2>
  </sect1>

  <sect1 id="sgml-primer-doctype-declaration">
    <title>A declara&ccedil;&atilde;o DOCTYPE</title>

    <para>O inicio de cada documento que voc&ecirc; escrever deve
    especificar o nome do DTD o qual se aplica ao seu documento.  Isto
    deve ser feito para que os interpretadores SGML possam determinar
    o DTD e assegurar que o documento esta em conformidade com o
    mesmo.</para>
    
    <para>Esta informa&ccedil;&atilde;o &eacute; geralmente expressada em uma linha, na
    declara&ccedil;&atilde;o DOCTYPE</para>
    
    <para>Uma declara&ccedil;&atilde;o t&iacute;pica para um documento escrito para
      conformar-se com a vers&atilde;o 4.0 do DTD HTML se parece com
      esta:</para>
    
    <programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN">]]></programlisting>

    <para>Esta linha cont&eacute;m diferentes componentes.</para>

    <variablelist>
      <varlistentry>
	<term><literal>&lt;!</literal></term>
	
	<listitem>
	  <para>&Eacute; o <emphasis>indicador</emphasis> que indica que se
	  trata de uma declara&ccedil;&atilde;o SGML.  Esta linha est&aacute; declarando o tipo do
	  documento.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><literal>DOCTYPE</literal></term>
	
	<listitem>
	  <para>Mostra que esta &eacute; uma declara&ccedil;&atilde;o SGML para o tipo 
	    de documento.</para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term><literal>html</literal></term>
	
	<listitem>
	  <para>O nome do primeiro <link linkend="sgml-primer-elements">
	    elemento</link> o qual ir&aacute; aparecer no documento</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><literal>PUBLIC "-//W3C//DTD HTML 4.0//EN"</literal></term>

	<listitem>
	  <para>Lista o Identificador P&uacute;blico Formal (FPI)<indexterm>
	      <primary>Identificar P&uacute;blico Formal</primary>
	    </indexterm>
	    para o DTD ao qual este documento conforma-se.  O seu
	    interpretador SGML ir&aacute; utiliza-lo para encontrar o DTD
	    correto quando estiver processando o documento.</para>

	  <para>O <literal>PUBLIC</literal> n&atilde;o faz parte do FPI, ele 
	    indica para o processador SGML como localizar o DTD
	    referenciado na FPI.  Outras formas de informar ao
	    interpretador SGML como localizar o DTD s&atilde;o abordadas <link
	    linkend="sgml-primer-fpi-alternatives">mais tarde</link>.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><literal>&gt;</literal></term>
	
	<listitem>
	  <para>Retorno ao documento.</para>
	</listitem>
      </varlistentry>
    </variablelist>
    
    <sect2>
      <title>Identificadores p&uacute;blicos formais (FPIs)<indexterm significance="preferred">
	  <primary>Identificadores P&uacute;blicos Formais</primary>
	</indexterm>
</title>

      <note>
	<para>Voc&ecirc; n&atilde;o precisa conhece-los, mas eles s&atilde;o um background
	  &uacute;til, e podem ajud&aacute;-lo a debugar problemas quando o seu
	  processador SGML n&atilde;o puder localizar o DTD que voc&ecirc; esta
	  utilizando.</para>
      </note>
      
      <para>Os FPIs devem seguir uma sintaxe espec&iacute;fica.  Esta sintaxe 
	&eacute; a seguinte :</para>

      <programlisting>"<replaceable>Propriet&aacute;rio</replaceable>//<replaceable>Palavra-Chave</replaceable> <replaceable>Descri&ccedil;&atilde;o</replaceable>//<replaceable>Idioma</replaceable>"</programlisting>

      <variablelist>
	<varlistentry>
	  <term><replaceable>Propriet&aacute;rio</replaceable></term>
	  
	  <listitem>
	    <para>Isto indica o propriet&aacute;rio da FPI.</para>

	    <para>Se este conjunto de caracteres come&ccedil;ar com
	      <quote>ISO</quote> significar&aacute; que o FPI &eacute; de propriedade do
	      ISO.  POr exemplo, a FPI <literal>"ISO 8879:1986//ENTITIES 
	      Greek Symbols//EN"</literal> lista o 
	      <literal>ISO 8879:1986</literal> como sendo o
	      propriet&aacute;rio do conjunto de entidades dos s&iacute;mbolos
	      Gregos.  O ISO 8879:1986 &eacute; o numero da ISO para o padr&atilde;o
	      SGML.</para>

	    <para>De outra forma, este conjunto de caracteres ir&aacute; se
	      parecer com <literal>-//<replaceable>Propriet&aacute;rio</replaceable></literal> ou
	      <literal>+//<replaceable>Propriet&aacute;rio</replaceable></literal> (Observe que 
	      a &uacute;nica diferen&ccedil;a &eacute; a introdu&atilde;o do <literal>+</literal>
	      ou do <literal>-</literal>).</para>

	    <para>Se o conjunto de caracteres come&ccedil;ar com
	      <literal>-</literal> significa que o propriet&aacute;rio da
	      informa&ccedil;&atilde;o n&atilde;o &eacute; registrado, se come&ccedil;ar com um <literal>+</literal>
	      significa que ele &eacute; registrado.</para>

	    <para>O ISO 9070:1991 define os nomes registrados s&atilde;o
	      gerados; ipode ser derivado do numero de uma publica&ccedil;&atilde;o
	      ISO, de um c&oacute;digo ISBN, ou um c&oacute;digo de organiza&ccedil;&atilde;o
	      atribuido de acordo com o ISO 6523.  Al&eacute;m disso, uma
	      autoridade de registro pode ser criada a fim de atribuir
	      nomes registrados.  O conselho IS delegou isto ao
	      <literal>American National Standards Institute</literal> i
	      (ANSI).</para>

	    <para>Como o Projeto FreeBSD n&atilde;o foi registrado o conjunto
	      de caracteres de propriet&aacute;rio &eacute; <literal>-//FreeBSD</literal>.  
	      E como voc&ecirc; pode ver, o W3C tamb&eacute;m n&atilde;o &eacute; um propriet&aacute;rio
	      registrado.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term><replaceable>Palavra-Chave</replaceable></term>
	  
	  <listitem>
	    <para>Existem diversas palavras-chave as quais indicam o
	      tipo de informa&ccedil;&atilde;o no arquivo.  Algumas das palavras
	      chaves mais comuns s&atilde;o 
	      <literal>DTD</literal>, <literal>ELEMENT</literal>,
	      <literal>ENTITIES</literal>, e <literal>TEXT</literal>.
	      A palavra chave <literal>DTD</literal> &eacute; utilizada
	      apenas para os arquivos DTD, a <literal>ELEMENT</literal> 
	      &eacute; normalmente utilizada para fragementos DTD os quais
	      contenham apenas entidades e declara&ccedil;&otilde;es de elementos.
	      A palavra <literal>TEXT</literal> &eacute; utilizada para o conte&uacute;do SGML i
	      (texto e tags).</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term><replaceable>Descric&atilde;o</replaceable></term>
	  
	  <listitem>
	    <para>Qualquer descri&ccedil;&atilde;o que voc&ecirc; deseje fornecer para o
	    conteudo deste arquivo.  O que pode incluir n&uacute;mero de
	    vers&atilde;o ou qualquer texto curto o qual seja significativo
	    para voc&ecirc; e &uacute;nico para o sistema SGML.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term><replaceable>Idioma</replaceable></term>
	  
	  <listitem>
	    <para>Este &eacute; um c&oacute;digo ISO de 2 letras o qual identifica o
	      idioma nativo do arquivo.  O c&oacute;digo <literal>EN</literal> &eacute; utilizado 
	      para o idioma ingl&ecirc;s.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <sect3>
	<title>Arquivos de <filename>cat&aacute;logo</filename></title>
	
	<para>Se voc&ecirc; utilizar a sintaxe acima e processar este
	  documento utilizando um processador SGML, o processador ir&aacute;
	  precisar de uma forma de associar a FPI ao nome do arquivo
	  no seu computador o qual cont&eacute;m o DTD.</para>
	
	<para>A fim de fazer-se isso pode-se utilizar de um arquivo de
	  cat&aacute;logo.  Um arquivo de cat&aacute;logo (tipicamente chamado de
	  <filename>catalog</filename>) cont&eacute;m linhas as quais mapeiam
	  FPIS para nomes de arquivos.  Por exemplo, se o arquivo de
	  cat&aacute;logo contiver a linha:</para>
	
	<programlisting>PUBLIC "-//W3C//DTD HTML 4.0//EN"             "4.0/strict.dtd"</programlisting>

	<para>O processador SGML saberia que deveria procurar pelo DTD
	  <filename>strict.dtd</filename> no subdiret&oacute;rio <filename>4.0</filename>
	  de qualquer diret&oacute;rio que possuisse um arquivo
	  <filename>catalog</filename> contendo esta linha.</par>

	<para>Olhe o conteudo do <filename>/usr/local/share/sgml/html/catalog</filename>.  
	  Este &eacute; o arquivo de cat&aacute;logo para o DTD HTML o qual ser&aacute;
	  instalado como parte do port
	   <filename role="package">textproc/docproj</filename>.</para>
      </sect3>

      <sect3>
	<title><envar>SGML_CATALOG_FILES</envar></title>

	<para>A fim de encontrar um arquivo de
	  <filename>cat&aacute;logo</filename>, o seu processador SGML
	  precisar&aacute; saber onde procurar.  Muitos deles possuem
	  recursos de param&ecirc;tros de linha de comando para especificar
	  o caminho para um ou mais cat&aacute;logos.</para>
	
	<para>Adicionalmente, voce pode definir a vari&aacute;vel de ambiente 
	  <envar>SGML_CATALOG_FILES</envar> para apontar para os
	  arquivos.  Esta vari&aacute;vel deve consistir de uma lista ,
	  separada por dois pontos (":"), de arquivos de cat&aacute;logo (incluindo 
	  seus caminhos completos) point to the files.</para>
	  
	<para>Tipicamente, voc&ecirc; precisar&aacute; incluir os seguintes
	  arquivos:</para>

	<itemizedlist>
	  <listitem>
	    <para><filename>/usr/local/share/sgml/docbook/4.1/catalog</filename></para>
	  </listitem>

	  <listitem>
	    <para><filename>/usr/local/share/sgml/html/catalog</filename></para>
	  </listitem>

	  <listitem>
	    <para><filename>/usr/local/share/sgml/iso8879/catalog</filename></para>
	  </listitem>

	  <listitem>
	    <para><filename>/usr/local/share/sgml/jade/catalog</filename></para>
	  </listitem>
	</itemizedlist>

	<para>Voc&ecirc; <link linkend="sgml-primer-envars">j&aacute; deve ter
	feito isto</link>.</para>
      </sect3>
    </sect2>
    
    <sect2 id="sgml-primer-fpi-alternatives">
      <title>Alternativas aos FPIs</title>
      
      <para>Ao inv&eacute;s de utilizar um FPI para indicar o DTD ao qual o
	documento conforma-se (e consequentemente, quais arquivos no
	sistema cont&eacute;m o DTD), voc&ecirc; pode especificar expecificar
	explicitamente o nome do arquivo.</para>
      
      <para>A sintaxe para isto &eacute; ligeiramente diferente:</para>
      
      <programlisting><![ CDATA [<!DOCTYPE html SYSTEM "/path/to/file.dtd">]]></programlisting>
      
      <para>A palavra chave <literal>SYSTEM</literal> indica que o
	processador SGML deve encontrar o DTD em um local espec&iacute;fico do
	sistema.  Isto tipicamente (mas n&atilde;o sempre) significa que o
	DTD ser&aacute; fornecido como um nome de arquivo.</para>
      
      <para>O uso de FPIs &eacute; preferido por raz&otilde;es de portabilidade.
	Voc&ecirc; pode n&atilde;o desejar ter que enviar uma c&oacute;pia do DTD junto
	com seu documento, e se voc&ecirc; utilizasse um indentificador
	<literal>SYSTEM</literal> todos necessitariam manter os seus
	DTDs no mesmo lugar que voc&ecirc;.</para>
    </sect2>
  </sect1>
  
  <sect1 id="sgml-primer-sgml-escape">
    <title>Voltando para o SGML</title>

    <para>Earlier in this primer I said that SGML is only used when writing a
      DTD.  This is not strictly true.  There is certain SGML syntax that you
      will want to be able to use within your documents.  For example,
      comments can be included in your document, and will be ignored by the
      parser.  Comments are entered using SGML syntax.  Other uses for SGML
      syntax in your document will be shown later too.</para>
      
    <para>Obviously, you need some way of indicating to the SGML processor
      that the following content is not elements within the document, but is
      SGML that the parser should act upon.</para>

    <para>These sections are marked by <literal>&lt;! ...  &gt;</literal> in
      your document.  Everything between these delimiters is SGML syntax as
      you might find within a DTD.</para>

    <para>As you may just have realised, the <link
	linkend="sgml-primer-doctype-declaration">DOCTYPE declaration</link>
      is an example of SGML syntax that you need to include in your
      document&hellip;</para>
  </sect1>
  
  <sect1 id="sgml-primer-comments">
    <title>Coment&aacute;rios</title>
    
    <para>Comments are an SGML construction, and are normally only valid
      inside a DTD.  However, as <xref linkend="sgml-primer-sgml-escape">
      shows, it is possible to use SGML syntax within your document.</para>

    <para>The delimiter for SGML comments is the string
      <quote><literal>--</literal></quote>.  The first occurrence of this string
      opens a comment, and the second closes it.</para>

    <example>
      <title>SGML generic comment</title>

      <programlisting>&lt;!-- test comment --></programlisting>
      
      <programlisting><![ CDATA [
<!-- This is inside the comment -->

<!-- This is another comment    -->

<!-- This is one way
     of doing multiline comments -->

<!-- This is another way of   --
  -- doing multiline comments -->]]></programlisting>
    </example>

    <![ %output.print; [
    <important>
      <title>Use 2 dashes</title>

      <para>There is a problem with producing the Postscript and PDF versions
	of this document.  The above example probably shows just one hyphen
	symbol, <literal>-</literal> after the <literal>&lt;!</literal> and
	before the <literal>&gt;</literal>.</para>

      <para>You <emphasis>must</emphasis> use two <literal>-</literal>,
	<emphasis>not</emphasis> one.  The Postscript and PDF versions have
	translated the two <literal>-</literal> in the original to a longer,
	more professional <emphasis>em-dash</emphasis>, and broken this
	example in the process.</para>

      <para>The HTML, plain text, and RTF versions of this document are not
	affected.</para>
    </important>
    ]]>
    
    <para>If you have used HTML before you may have been shown different rules
      for comments.  In particular, you may think that the string
      <literal>&lt;!--</literal> opens a comment, and it is only closed by
      <literal>--&gt;</literal>.</para>

    <para>This is <emphasis>not</emphasis> the case.  A lot of web browsers
      have broken HTML parsers, and will accept that as valid.  However, the
      SGML parsers used by the Documentation Project are much stricter, and
      will reject documents that make that error.</para>

    <example>
      <title>Erroneous SGML comments</title>

      <programlisting><![ CDATA [
<!-- This is in the comment --

     THIS IS OUTSIDE THE COMMENT!

  -- back inside the comment -->]]></programlisting>

      <para>The SGML parser will treat this as though it were actually;</para>

      <programlisting>&lt;!THIS IS OUTSIDE THE COMMENT&gt;</programlisting>

      <para>This is not valid SGML, and may give confusing error
	messages.</para>

      <programlisting><![ CDATA [<!--------------- This is a very bad idea --------------->]]></programlisting>

      <para>As the example suggests, <emphasis>do not</emphasis> write
	comments like that.</para>

      <programlisting><![ CDATA [<!--===================================================-->]]></programlisting>

      <para>That is a (slightly) better approach, but it still potentially
	confusing to people new to SGML.</para>
    </example>

    <sect2>
      <title>Para voc&ecirc; fazer&hellip;</title>

      <procedure>
	<step>
	  <para>Add some comments to <filename>example.sgml</filename>, and
	    check that the file still validates using &man.nsgmls.1;</para>
	</step>

	<step>
	  <para>Add some invalid comments to
	    <filename>example.sgml</filename>, and see the error messages that
	    &man.nsgmls.1; gives when it encounters an invalid comment.</para>
	</step>
      </procedure>
    </sect2>
  </sect1>
    
  <sect1 id="sgml-primer-entities">
    <title>Entidades</title>

    <para>Entities are a mechanism for assigning names to chunks of content.
      As an SGML parser processes your document, any entities it finds are
      replaced by the content of the entity.</para>
    
    <para>This is a good way to have re-usable, easily changeable chunks of
      content in your SGML documents.  It is also the only way to include one
      marked up file inside another using SGML.</para>
    
    <para>There are two types of entities which can be used in two different
      situations; <emphasis>general entities</emphasis> and
      <emphasis>parameter entities</emphasis>.</para>
    
    <sect2 id="sgml-primer-general-entities">
      <title>Entidades gerais</title>
      
      <para>You cannot use general entities in an SGML context (although you
	define them in one).  They can only be used in your document.
	Contrast this with <link
	  linkend="sgml-primer-parameter-entities">parameter
	  entities</link>.</para>

      <para>Each general entity has a name.  When you want to reference a
	general entity (and therefore include whatever text it represents in
	your document), you write
	<literal>&amp;<replaceable>entity-name</replaceable>;</literal>.  For
	example, suppose you had an entity called
	<literal>current.version</literal> which expanded to the current
	version number of your product.  You could write;</para>

      <programlisting><![ CDATA [<para>The current version of our product is
  &current.version;.</para>]]></programlisting>

      <para>When the version number changes you can simply change the
	definition of the value of the general entity and reprocess your
	document.</para>

      <para>You can also use general entities to enter characters that you
	could not otherwise include in an SGML document.  For example, &lt;
	and &amp; cannot normally appear in an SGML document.  When the SGML
	parser sees the &lt; symbol it assumes that a tag (either a start tag
	or an end tag) is about to appear, and when it sees the &amp; symbol
	it assumes the next text will be the name of an entity.</para>

      <para>Fortunately, you can use the two general entities &amp;lt; and
	&amp;amp; whenever you need to include one or other of these </para>
	
      <para>A general entity can only be defined within an SGML context.
	Typically, this is done immediately after the DOCTYPE
	declaration.</para>

      <example>
	<title>Defining general entities</title>

	<programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
<!ENTITY current.version    "3.0-RELEASE">
<!ENTITY last.version       "2.2.7-RELEASE">
]>]]></programlisting>
	  
	<para>Notice how the DOCTYPE declaration has been extended by adding a
	  square bracket at the end of the first line.  The two entities are
	  then defined over the next two lines, before the square bracket is
	  closed, and then the DOCTYPE declaration is closed.</para>

	<para>The square brackets are necessary to indicate that we are
	  extending the DTD indicated by the DOCTYPE declaration.</para>
      </example>
    </sect2>
    
    <sect2 id="sgml-primer-parameter-entities">
      <title>Entidades de par&acirc;metro</title>

      <para>Like <link linkend="sgml-primer-general-entities">general
	  entities</link>, parameter entities are used to assign names to
	reusable chunks of text.  However, where as general entities can only
	be used within your document, parameter entities can only be used
	within an <link linkend="sgml-primer-sgml-escape">SGML
	  context</link>.</para>

      <para>Parameter entities are defined in a similar way to general
	entities.  However, instead of using
	<literal>&amp;<replaceable>entity-name</replaceable>;</literal> to
	refer to them, use
	<literal>%<replaceable>entity-name</replaceable>;</literal><footnote>
	  <para><emphasis>P</emphasis>arameter entities use the
	    <emphasis>P</emphasis>ercent symbol.</para>
	</footnote>.  The definition also includes the <literal>%</literal>
	between the <literal>ENTITY</literal> keyword and the name of the
	entity.</para>
      
      <example>
	<title>Defining parameter entities</title>
	
	<programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
<!ENTITY % param.some "some">
<!ENTITY % param.text "text">
<!ENTITY % param.new  "%param.some more %param.text">

<!-- %param.new now contains "some more text" -->
]>]]></programlisting>
      </example>
	
      <para>This may not seem particularly useful.  It will be.</para>
    </sect2>

    <sect2>
      <title>Para voc&ecirc; fazer&hellip;</title>

      <procedure>
	<step>
	  <para>Add a general entity to
	    <filename>example.sgml</filename>.</para>

	  <programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" [
<!ENTITY version "1.1">
]>	  

<html>
  <head>	     
    <title>An example HTML file</title>
  </head>

  <!-- You might well have some comments in here as well -->
	  
  <body>	    
    <p>This is a paragraph containing some text.</p>

    <p>This paragraph contains some more text.</p>

    <p align="right">This paragraph might be right-justified.</p>

    <p>The current version of this document is: &version;</p>	  
  </body>	    
</html>]]></programlisting>	  
	</step>

	<step>
	  <para>Validate the document using &man.nsgmls.1;</para>
	</step>

	<step>
	  <para>Load <filename>example.sgml</filename> into your web browser
	    (you may need to copy it to <filename>example.html</filename>
	    before your browser recognises it as an HTML document).</para>

	  <para>Unless your browser is very advanced, you will not see the entity
	    reference <literal>&amp;version;</literal> replaced with the
	    version number.  Most web browsers have very simplistic parsers
	    which do not handle proper SGML<footnote>
	      <para>This is a shame.  Imagine all the problems and hacks (such
		as Server Side Includes) that could be avoided if they
		did.</para>
	    </footnote>.</para>
	</step>

	<step>
	  <para>The solution is to <emphasis>normalise</emphasis> your
	    document using an SGML normaliser.  The normaliser reads in valid
	    SGML and outputs equally valid SGML which has been transformed in
	    some way.  One of the ways in which the normaliser transforms the
	    SGML is to expand all the entity references in the document,
	    replacing the entities with the text that they represent.</para>

	  <para>You can use &man.sgmlnorm.1; to do this.</para>

          <screen>&prompt.user; <userinput>sgmlnorm example.sgml > example.html</userinput></screen>

	  <para>You should find a normalised (i.e., entity references
	    expanded) copy of your document in
	    <filename>example.html</filename>, ready to load into your web
	    browser.</para>
	</step>

	<step>
	  <para>If you look at the output from &man.sgmlnorm.1; you will see
	    that it does not include a DOCTYPE declaration at the start.  To
	    include this you need to use the <option>-d</option>
	    option;</para>

          <screen>&prompt.user; <userinput>sgmlnorm -d example.sgml > example.html</userinput></screen>
	</step>
      </procedure>
    </sect2>
  </sect1>
  
  <sect1 id="sgml-primer-include">
    <title>Utilizando entidades para incluir arquivos</title>
    
    <para>Entities (both <link
	linkend="sgml-primer-general-entities">general</link> and <link
	linkend="sgml-primer-parameter-entities">parameter</link>) are
      particularly useful when used to include one file inside another.</para>

    <sect2 id="sgml-primer-include-using-gen-entities">
      <title>Utilizando entidades gerais para incluir arquivos</title>
      
      <para>Suppose you have some content for an SGML book organized into
	files, one file per chapter, called
	<filename>chapter1.sgml</filename>,
	<filename>chapter2.sgml</filename>, and so forth, with a
	<filename>book.sgml</filename> file that will contain these
	chapters.</para>

      <para>In order to use the contents of these files as the values for your
	entities, you declare them with the <literal>SYSTEM</literal> keyword.
	This directs the SGML parser to use the contents of the named file as
	the value of the entity.</para>

      <example>
	<title>Using general entities to include files</title>
	
	<programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
<!ENTITY chapter.1 SYSTEM "chapter1.sgml">
<!ENTITY chapter.2 SYSTEM "chapter2.sgml">
<!ENTITY chapter.3 SYSTEM "chapter3.sgml">
<!-- And so forth -->
]>

<html>
  <!-- Use the entities to load in the chapters -->

  &chapter.1;
  &chapter.2;
  &chapter.3;
</html>]]></programlisting>
      </example>
      
      <warning>
	<para>When using general entities to include other files within a
	  document, the files being included
	  (<filename>chapter1.sgml</filename>,
	  <filename>chapter2.sgml</filename>, and so on) <emphasis>must
	    not</emphasis> start with a DOCTYPE declaration.  This is a syntax
	  error.</para>
      </warning>
    </sect2>
    
    <sect2>
      <title>Utilizando entidades de par&acirc;metro Para incluir arquivos</title>
      
      <para>Recall that parameter entities can only be used inside an SGML
	context.  Why then would you want to include a file within an SGML
	context?</para>

      <para>You can use this to ensure that you can reuse your general
	entities.</para>

      <para>Suppose that you had many chapters in your document, and you
	reused these chapters in two different books, each book organising the
	chapters in a different fashion.</para>

      <para>You could list the entities at the top of each book, but this
	quickly becomes cumbersome to manage.</para>

      <para>Instead, place the general entity definitions inside one file,
	and use a parameter entity to include that file within your
	document.</para>

      <example>
	<title>Using parameter entities to include files</title>

	<para>First, place your entity definitions in a separate file, called
	  <filename>chapters.ent</filename>.  This file contains the
	  following;</para>
	  
	<programlisting><![ CDATA [<!ENTITY chapter.1 SYSTEM "chapter1.sgml">
<!ENTITY chapter.2 SYSTEM "chapter2.sgml">
<!ENTITY chapter.3 SYSTEM "chapter3.sgml">]]></programlisting>

	<para>Now create a parameter entity to refer to the contents of the
	  file.  Then use the parameter entity to load the file into the
	  document, which will then make all the general entities available
	  for use.  Then use the general entities as before;</para>

	<programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
<!-- Define a parameter entity to load in the chapter general entities -->
<!ENTITY % chapters SYSTEM "chapters.ent">

<!-- Now use the parameter entity to load in this file -->
%chapters;
]>

<html>
  &chapter.1;
  &chapter.2;
  &chapter.3;
</html>]]></programlisting>
      </example>
    </sect2>

    <sect2>
      <title>Para voc&ecirc; fazer&hellip;</title>

      <sect3>
	<title>Utilizando entidades gerais para incluir arquivos</title>

	<procedure>
	  <step>
	    <para>Create three files, <filename>para1.sgml</filename>,
	      <filename>para2.sgml</filename>, and
	      <filename>para3.sgml</filename>.</para>

	    <para>Put content similar to the following in each file;</para>

	    <programlisting><![ CDATA [<p>This is the first paragraph.</p>]]></programlisting>
	  </step>

	  <step>
	    <para>Edit <filename>example.sgml</filename> so that it looks like
	      this;</para>

	    <programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
<!ENTITY version "1.1">
<!ENTITY para1 SYSTEM "para1.sgml">
<!ENTITY para2 SYSTEM "para2.sgml">
<!ENTITY para3 SYSTEM "para3.sgml">
]>

<html>
  <head>
    <title>An example HTML file</title>
  </head>

  <body>
    <p>The current version of this document is: &version;</p>

    &para1;
    &para2;
    &para3;
  </body>
</html>]]></programlisting>
	  </step>

	  <step>
	    <para>Produce <filename>example.html</filename> by normalising
	      <filename>example.sgml</filename>.</para>

            <screen>&prompt.user; <userinput>sgmlnorm -d example.sgml > example.html</userinput></screen>
	  </step>

	  <step>
	    <para>Load <filename>example.html</filename> into your web
	      browser, and confirm that the
	      <filename>para<replaceable>n</replaceable>.sgml</filename> files
	      have been included in <filename>example.html</filename>.</para>
	  </step>
	</procedure>
      </sect3>

      <sect3>
	<title>Use parameter entities to include files</title>

	<note>
	  <para>You must have taken the previous steps first.</para>
	</note>
	
	<procedure>
	  <step>
	    <para>Edit <filename>example.sgml</filename> so that it looks like
	      this;</para>
	    
	    <programlisting><![ CDATA [<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
<!ENTITY % entities SYSTEM "entities.sgml"> %entities;
]>

<html>
  <head>
    <title>An example HTML file</title>
  </head>

  <body>
    <p>The current version of this document is: &version;</p>

    &para1;
    &para2;
    &para3;
  </body>
</html>]]></programlisting>
	  </step>

	  <step>
	    <para>Create a new file, <filename>entities.sgml</filename>, with
	      this content:</para>

	    <programlisting><![ CDATA [<!ENTITY version "1.1">
<!ENTITY para1 SYSTEM "para1.sgml">
<!ENTITY para2 SYSTEM "para2.sgml">
<!ENTITY para3 SYSTEM "para3.sgml">]]></programlisting>
	  </step>

	  <step>
	    <para>Produce <filename>example.html</filename> by normalising
	      <filename>example.sgml</filename>.</para>

            <screen>&prompt.user; <userinput>sgmlnorm -d example.sgml > example.html</userinput></screen>
	  </step>

	  <step>
	    <para>Load <filename>example.html</filename> into your web
	      browser, and confirm that the
	      <filename>para<replaceable>n</replaceable>.sgml</filename> files
	      have been included in <filename>example.html</filename>.</para>
	  </step>
	</procedure>
      </sect3>
    </sect2>
  </sect1>
  
  <sect1 id="sgml-primer-marked-sections">
    <title>Sess&otilde;es marcadas</title>
    
    <para>SGML provides a mechanism to indicate that particular pieces of the
      document should be processed in a special way.  These are termed
      <quote>marked sections</quote>.</para>

    <example>
      <title>Structure of a marked section</title>

      <programlisting>&lt;![ <replaceable>KEYWORD</replaceable> [
  Contents of marked section
]]&gt;</programlisting>
    </example>

    <para>As you would expect, being an SGML construct, a marked section
      starts with <literal>&lt!</literal>.</para>

    <para>The first square bracket begins to delimit the marked
      section.</para>

    <para><replaceable>KEYWORD</replaceable> describes how this marked
      section should be processed by the parser.</para>

    <para>The second square bracket indicates that the content of the marked
      section starts here.</para>
    
    <para>The marked section is finished by closing the two square brackets,
      and then returning to the document context from the SGML context with
      <literal>&gt;</literal></para>
    
    <sect2>
      <title>Palavras de sess&atilde;o marcada</title>
      
      <sect3>
	<title><literal>CDATA</literal>, <literal>RCDATA</literal></title>
	
	<para>These keywords denote the marked sections <emphasis>content
	    model</emphasis>, and allow you to change it from the
	  default.</para>
	
	<para>When an SGML parser is processing a document it keeps track
	  of what is called the <quote>content model</quote>.</para>
	
	<para>Briefly, the content model describes what sort of content the
	  parser is expecting to see, and what it will do with it when it
	  finds it.</para>

	<para>The two content models you will probably find most useful are
	  <literal>CDATA</literal> and <literal>RCDATA</literal>.</para>
	
	<para><literal>CDATA</literal> is for <quote>Character Data</quote>.
	  If the parser is in this content model then it is expecting to see
	  characters, and characters only.  In this model the &lt; and &amp;
	  symbols lose their special status, and will be treated as ordinary
	  characters.</para>
	
	<para><literal>RCDATA</literal> is for <quote>Entity references and
	  character data</quote> If the parser is in this content model then it
	  is expecting to see characters <emphasis>and</emphasis> entities.
	  &lt; loses its special status, but &amp; will still be treated as
	  starting the beginning of a general entity.</para>
	
	<para>This is particularly useful if you are including some verbatim
	  text that contains lots of &lt; and &amp; characters.  While you
	  could go through the text ensuring that every &lt; is converted to a
	  &amp;lt; and every &amp; is converted to a &amp;amp;, it can be
	  easier to mark the section as only containing CDATA.  When the SGML
	  parser encounters this it will ignore the &lt; and &amp; symbols
	  embedded in the content.</para>

        <note>
          <para>When you use <literal>CDATA</literal> or
            <literal>RCDATA</literal> in examples of text marked up in SGML,
            keep in mind that the content of <literal>CDATA</literal> is not
            validated.  You have to check the included SGML text using other
            means.  You could, for example, write the example in another
            document, validate the example code, and then paste it to your
            <literal>CDATA</literal> content.</para>
        </note>
	<!-- The nesting of CDATA within the next example is disgusting -->
	  
	<example>
	  <title>Using a CDATA marked section</title>
	  
	  <programlisting>&lt;para>Here is an example of how you would include some text
  that contained many &amp;lt; and &amp;amp; symbols.  The sample
  text is a fragment of HTML.  The surrounding text (&lt;para> and
  &lt;programlisting>) are from DocBook.&lt;/para>

&lt;programlisting>
  &lt;![ CDATA [  <![ CDATA [
    <p>This is a sample that shows you some of the elements within
      HTML.  Since the angle brackets are used so many times, it is
      simpler to say the whole example is a CDATA marked section
      than to use the entity names for the left and right angle
      brackets throughout.</p>

    <ul>
      <li>This is a listitem</li>
      <li>This is a second listitem</li>
      <li>This is a third listitem</li>
    </ul>

    <p>This is the end of the example.</p>]]>
  ]]&gt;
&lt/programlisting></programlisting>

	  <para>If you look at the source for this document you will see this
	    technique used throughout.</para>
	</example>
      </sect3>
      
      <sect3>
	<title><literal>INCLUDE</literal> and
	  <literal>IGNORE</literal></title>
	
	<para>If the keyword is <literal>INCLUDE</literal> then the contents
	  of the marked section will be processed.  If the keyword is
	  <literal>IGNORE</literal> then the marked section is ignored and
	  will not be processed.  It will not appear in the output.</para>

	<example>
	  <title>Using <literal>INCLUDE</literal> and
	    <literal>IGNORE</literal> in marked sections</title>

	  <programlisting>&lt;![ INCLUDE [
  This text will be processed and included.
]]&gt;

&lt;![ IGNORE [
  This text will not be processed or included.
]]&gt;</programlisting>
	</example>
	
	<para>By itself, this is not too useful.  If you wanted to remove text
	  from your document you could cut it out, or wrap it in
	  comments.</para>
	  
	<para>It becomes more useful when you realise you can use <link
	    linkend="sgml-primer-parameter-entities">parameter entities</link>
	  to control this.  Remember that parameter entities can only be used
	  in SGML contexts, and the keyword of a marked section
	  <emphasis>is</emphasis> an SGML context.</para>

	<para>For example, suppose that you produced a hard-copy version of
	  some documentation and an electronic version.  In the electronic
	  version you wanted to include some extra content that was not to
	  appear in the hard-copy.</para>

	<para>Create a parameter entity, and set its value to
	  <literal>INCLUDE</literal>.  Write your document, using marked
	  sections to delimit content that should only appear in the
	  electronic version.  In these marked sections use the parameter
	  entity in place of the keyword.</para>

	<para>When you want to produce the hard-copy version of the document,
	  change the parameter entity's value to <literal>IGNORE</literal> and
	  reprocess the document.</para>

	<example>
	  <title>Using a parameter entity to control a marked
	    section</title>
	  
	  <programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
&lt;!ENTITY % electronic.copy "INCLUDE">	     
]]&gt;

...

&lt;![ %electronic.copy [
  This content should only appear in the electronic
  version of the document.
]]&gt;</programlisting>

	  <para>When producing the hard-copy version, change the entity's
	    definition to;</para>
	  
	  <programlisting>&lt;!ENTITY % electronic.copy "IGNORE"></programlisting>

	  <para>On reprocessing the document, the marked sections that use
	    <literal>%electronic.copy</literal> as their keyword will be
	    ignored.</para>
	</example>
      </sect3>
    </sect2>

    <sect2>
      <title>Para voc&ecirc; fazer&hellip;</title>

      <procedure>
	<step>
	  <para>Create a new file, <filename>section.sgml</filename>, that
	    contains the following;</para>

	  <programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" [
&lt;!ENTITY % text.output "INCLUDE">
]&gt;

&lt;html>
  &lt;head>
    &lt;title>An example using marked sections&lt;/title>
  &lt;/head>

  &lt;body>	    
    &lt;p>This paragraph &lt;![ CDATA [contains many &lt;
      characters (&lt; &lt; &lt; &lt; &lt;) so it is easier
      to wrap it in a CDATA marked section ]]&gt;&lt;/p>

    &lt;![ IGNORE [
    &lt;p>This paragraph will definitely not be included in the
      output.&lt;/p>
    ]]&gt;

    &lt;![ <![ CDATA [%text.output]]> [
    &lt;p>This paragraph might appear in the output, or it
      might not.&lt;/p>

    &lt;p>Its appearance is controlled by the <![CDATA[%text.output]]>
      parameter entity.&lt;/p>	    
    ]]&gt;
  &lt;/body>
&lt;/html></programlisting>	    
	</step>

	<step>
	  <para>Normalise this file using &man.sgmlnorm.1; and examine the
	    output.  Notice which paragraphs have appeared, which have
	    disappeared, and what has happened to the content of the CDATA
	    marked section.</para>
	</step>

	<step>
	  <para>Change the definition of the <literal>text.output</literal>
	    entity from <literal>INCLUDE</literal> to
	    <literal>IGNORE</literal>.  Re-normalise the file, and examine the
	    output to see what has changed.  </para>
	</step>
      </procedure>
    </sect2>
  </sect1>
  
  <sect1 id="sgml-primer-conclusion">
    <title>Conclus&atilde;o</title>
    
    <para>That is the conclusion of this SGML primer.  For reasons of space
      and complexity several things have not been covered in depth (or at
      all).  However, the previous sections cover enough SGML for you to be
      able to follow the organisation of the FDP documentation.</para>
  </sect1>
</chapter>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
